from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import logging
import time
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import json
import base64
import tempfile
import os
import re

# Import the robust TTS stack with gTTS for Indian languages
import whisper
from transformers import pipeline
from gtts import gTTS
import platform

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load Whisper model (small = good balance of speed & accuracy)
logger.info("ЁЯОд Loading Whisper model (this may take a moment)...")
whisper_model = whisper.load_model("tiny")  # Using tiny model for faster loading
logger.info("тЬЕ Whisper model loaded successfully!")

# Skip DialoGPT - too slow and unhelpful!
logger.info("ЁЯМ╛ Using Fast Agriculture Assistant instead of DialoGPT...")

app = FastAPI(title="ЁЯМ╛ Fast Agriculture AI with Whisper + Smart RAG + gTTS", version="5.0.0")

# Agriculture Knowledge Base for RAG (same as before)
AGRICULTURE_KB = {
    "crops": {
        "rice": {
            "en": "Rice is a staple grain crop. Best grown in flooded fields. Requires 4-6 months growing season. Plant during monsoon. Harvest when grains turn golden. Major varieties: Basmati, Jasmine, Arborio.",
            "ta": "роЕро░ро┐роЪро┐ роТро░рпБ роорпБроХрпНроХро┐роп родро╛ройро┐роп рокропро┐ро░рпН. ро╡рпЖро│рпНро│роорпН роиро┐ро▒рпИроирпНрод ро╡ропро▓рпНроХро│ро┐ро▓рпН роЪро┐ро▒рокрпНрокро╛роХ ро╡ро│ро░рпБроорпН. 4-6 рооро╛род ро╡ро│ро░рпНроЪрпНроЪро┐ роХро╛ро▓роорпН родрпЗро╡рпИ. рокро░рпБро╡рооро┤рпИроХрпН роХро╛ро▓родрпНродро┐ро▓рпН роироЯро╡рпБ роЪрпЖропрпНропро╡рпБроорпН. родро╛ройро┐ропроЩрпНроХро│рпН родроЩрпНроХ роиро┐ро▒рооро╛роХ рооро╛ро▒рпБроорпНрокрпЛродрпБ роЕро▒рпБро╡роЯрпИ роЪрпЖропрпНропро╡рпБроорпН.",
            "te": "р░╡р░░р░┐ р░кр▒Нр░░р░зр░╛р░и р░зр░╛р░ир▒Нр░п р░кр░Вр░Я. р░ир▒Ар░░р▒Б р░ир░┐р░Вр░бр░┐р░и р░кр▒Кр░▓р░╛р░▓р▒Нр░▓р▒Л р░мр░╛р░Чр░╛ р░кр▒Жр░░р▒Бр░Чр▒Бр░др▒Бр░Вр░жр░┐. 4-6 р░ир▒Жр░▓р░▓ р░кр▒Жр░░р▒Бр░Чр▒Бр░жр░▓ р░Хр░╛р░▓р░В р░Ер░╡р░╕р░░р░В. р░╡р░░р▒Нр░╖р░╛р░Хр░╛р░▓р░Вр░▓р▒Л р░ир░╛р░Яр░╛р░▓р░┐. р░зр░╛р░ир▒Нр░пр░╛р░▓р▒Б р░мр░Вр░Чр░╛р░░р▒Б р░░р░Вр░Чр▒Бр░▓р▒Лр░Хр░┐ р░ор░╛р░░р░┐р░ир░кр▒Нр░кр▒Бр░бр▒Б р░Хр▒Лр░пр░╛р░▓р░┐.",
            "ml": "р┤Ер┤░р┤┐ р┤Тр┤░р╡Б р┤кр╡Нр┤░р┤зр┤╛р┤и р┤зр┤╛р┤ир╡Нр┤п р┤╡р┤┐р┤│. р┤╡р╡Жр┤│р╡Нр┤│р┤В р┤ир┤┐р┤▒р┤Юр╡Нр┤Ю р┤╡р┤пр┤▓р╡Бр┤Хр┤│р┤┐р╡╜ р┤ир┤ир╡Нр┤ир┤╛р┤пр┤┐ р┤╡р┤│р┤░р╡Бр┤В. 4-6 р┤ор┤╛р┤╕р┤др╡Нр┤др╡Ж р┤╡р┤│р╡╝р┤Ър╡Нр┤Ър┤╛р┤Хр┤╛р┤▓р┤В р┤Жр┤╡р┤╢р╡Нр┤пр┤В. р┤ор┤┤р┤Хр╡Нр┤Хр┤╛р┤▓р┤др╡Нр┤др╡Н р┤ир┤Яр┤гр┤В. р┤зр┤╛р┤ир╡Нр┤пр┤Щр╡Нр┤Щр╡╛ р┤╕р╡Нр┤╡р╡╝р┤гр╡Нр┤г р┤ир┤┐р┤▒р┤ор┤╛р┤Хр╡Бр┤ор╡Нр┤кр╡Лр╡╛ р┤╡р┤┐р┤│р┤╡р╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр┤╛р┤В."
        },
        "wheat": {
            "en": "Wheat is a major cereal grain. Grows best in temperate climates. Sow in October-November. Harvest in March-April. Requires well-drained soil. Major varieties: Durum, Hard Red, Soft White.",
            "ta": "роХрпЛродрпБроорпИ роТро░рпБ роорпБроХрпНроХро┐роп родро╛ройро┐роп рокропро┐ро░рпН. рооро┐родрооро╛рой роХро╛ро▓роиро┐ро▓рпИропро┐ро▓рпН роЪро┐ро▒рокрпНрокро╛роХ ро╡ро│ро░рпБроорпН. роЕроХрпНроЯрпЛрокро░рпН-роиро╡роорпНрокро░ро┐ро▓рпН ро╡ро┐родрпИроХрпНроХро╡рпБроорпН. рооро╛ро░рпНроЪрпН-роПрокрпНро░ро▓ро┐ро▓рпН роЕро▒рпБро╡роЯрпИ роЪрпЖропрпНропро╡рпБроорпН. роиро▓рпНро▓ ро╡роЯро┐роХро╛ро▓рпН роорогрпН родрпЗро╡рпИ.",
            "te": "р░Чр▒Лр░зр▒Бр░о р░кр▒Нр░░р░зр░╛р░и р░зр░╛р░ир▒Нр░п р░кр░Вр░Я. р░╕р░ор░╢р▒Ар░др▒Лр░╖р▒Нр░г р░╡р░╛р░др░╛р░╡р░░р░гр░Вр░▓р▒Л р░мр░╛р░Чр░╛ р░кр▒Жр░░р▒Бр░Чр▒Бр░др▒Бр░Вр░жр░┐. р░Ер░Хр▒Нр░Яр▒Лр░мр░░р▒Н-р░ир░╡р░Вр░мр░░р▒НтАМр░▓р▒Л р░╡р░┐р░др▒Нр░др░╛р░▓р░┐. р░ор░╛р░░р▒Нр░Ър░┐-р░Пр░кр▒Нр░░р░┐р░▓р▒НтАМр░▓р▒Л р░Хр▒Лр░пр░╛р░▓р░┐. р░ор░Вр░Ър░┐ р░ир▒Ар░Яр░┐ р░╡р░бр░кр▒Лр░д р░Чр░▓ р░ир▒Зр░▓ р░Ер░╡р░╕р░░р░В.",
            "ml": "р┤Чр╡Лр┤др┤ор╡Нр┤кр╡Н р┤Тр┤░р╡Б р┤кр╡Нр┤░р┤зр┤╛р┤и р┤зр┤╛р┤ир╡Нр┤п р┤╡р┤┐р┤│. р┤ор┤┐р┤др┤╢р╡Ар┤др╡Лр┤╖р╡Нр┤г р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤пр┤┐р╡╜ р┤ир┤ир╡Нр┤ир┤╛р┤пр┤┐ р┤╡р┤│р┤░р╡Бр┤В. р┤Тр┤Хр╡Нр┤Яр╡Лр┤мр╡╝-р┤ир┤╡р┤Вр┤мр┤▒р┤┐р╡╜ р┤╡р┤┐р┤др┤пр╡Нр┤Хр╡Нр┤Хр┤гр┤В. р┤ор┤╛р╡╝р┤Ър╡Нр┤Ър╡Н-р┤Пр┤кр╡Нр┤░р┤┐р┤▓р┤┐р╡╜ р┤╡р┤┐р┤│р┤╡р╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр┤гр┤В."
        },
        "sugarcane": {
            "en": "Sugarcane is a tropical cash crop. Requires hot, humid climate. Plant 12-18 month crop cycle. Needs abundant water. Harvest when stalks are mature and sweet. Major producer of sugar and jaggery.",
            "ta": "роХро░рпБроорпНрокрпБ роТро░рпБ ро╡рпЖрокрпНрокроорогрпНроЯро▓ рокрогрокрпН рокропро┐ро░рпН. ро╡рпЖрокрпНрокрооро╛рой, роИро░рокрпНрокродрооро╛рой роХро╛ро▓роиро┐ро▓рпИ родрпЗро╡рпИ. 12-18 рооро╛род рокропро┐ро░рпН роЪрпБро┤ро▒рпНроЪро┐. роЕродро┐роХ роирпАро░рпН родрпЗро╡рпИ. родрогрпНроЯрпБроХро│рпН роорпБродро┐ро░рпНроирпНродрпБ роЗройро┐рокрпНрокро╛роХ роЗро░рпБроХрпНроХрпБроорпНрокрпЛродрпБ роЕро▒рпБро╡роЯрпИ.",
            "te": "р░Ър▒Жр░░р░Хр▒Б р░Йр░╖р▒Нр░гр░ор░Вр░бр░▓ р░╡р░╛р░гр░┐р░Ьр▒Нр░п р░кр░Вр░Я. р░╡р▒Зр░бр░┐р░ор░┐р░Чр░┐р░▓р░┐р░и, р░др▒Зр░ор░др▒Л р░Хр▒Вр░бр░┐р░и р░╡р░╛р░др░╛р░╡р░░р░гр░В р░Ер░╡р░╕р░░р░В. 12-18 р░ир▒Жр░▓р░▓ р░кр░Вр░Я р░Ър░Хр▒Нр░░р░В. р░кр▒Бр░╖р▒Нр░Хр░▓ р░ир▒Ар░░р▒Б р░Ер░╡р░╕р░░р░В.",
            "ml": "р┤Хр┤░р┤┐р┤ор╡Нр┤кр╡Н р┤Йр┤╖р╡Нр┤гр┤ор╡Зр┤Цр┤▓р┤╛ р┤╡р┤╛р┤гр┤┐р┤Ьр╡Нр┤п р┤╡р┤┐р┤│. р┤Ър╡Вр┤Яр╡Бр┤│р╡Нр┤│р┤др╡Бр┤В р┤Ир╡╝р┤кр╡Нр┤кр┤ор╡Бр┤│р╡Нр┤│р┤др╡Бр┤ор┤╛р┤п р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е р┤Жр┤╡р┤╢р╡Нр┤пр┤В. 12-18 р┤ор┤╛р┤╕р┤др╡Нр┤др╡Ж р┤╡р┤┐р┤│ р┤Ър┤Хр╡Нр┤░р┤В. р┤зр┤╛р┤░р┤╛р┤│р┤В р┤╡р╡Жр┤│р╡Нр┤│р┤В р┤Жр┤╡р┤╢р╡Нр┤пр┤В."
        }
    },
    "soil": {
        "clay": {
            "en": "Clay soil retains water well but drains slowly. Good for rice cultivation. Add organic matter to improve drainage. Test pH regularly. Suitable for crops that need consistent moisture.",
            "ta": "роХро│ро┐роорогрпН роорогрпН роирпАро░рпИ роиройрпНро▒ро╛роХ родроХрпНроХро╡рпИроХрпНроХро┐ро▒родрпБ роЖройро╛ро▓рпН роорпЖродрпБро╡ро╛роХ ро╡роЯро┐роХро┐ро▒родрпБ. роирпЖро▓рпН роЪро╛роХрпБрокроЯро┐роХрпНроХрпБ роиро▓рпНро▓родрпБ. ро╡роЯро┐роХро╛ро▓рпН роорпЗроорпНрокроЯрпБродрпНрод роХро░ро┐роо рокрпКро░рпБроЯрпНроХро│рпИ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН.",
            "te": "р░ор░Яр▒Нр░Яр░┐ р░ор░Вр░Ър░┐р░Чр░╛ р░ир▒Ар░░р▒Б р░ир░┐р░▓р▒Бр░кр▒Бр░Хр▒Бр░Вр░Яр▒Бр░Вр░жр░┐ р░Хр░╛р░ир▒А р░ир▒Жр░ор▒Нр░ор░жр░┐р░Чр░╛ р░кр░╛р░░р░┐р░кр▒Лр░др▒Бр░Вр░жр░┐. р░╡р░░р░┐ р░╕р░╛р░Чр▒Бр░Хр▒Б р░ор░Вр░Ър░┐р░жр░┐. р░ир▒Ар░Яр░┐ р░╡р░бр░кр▒Лр░др░ир▒Б р░ор▒Жр░░р▒Бр░Чр▒Бр░кр░░р░Ър░бр░╛р░ир░┐р░Хр░┐ р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░кр░жр░╛р░░р▒Нр░ер░╛р░▓р░ир▒Б р░Хр░▓р░кр░Вр░бр░┐.",
            "ml": "р┤Хр┤│р┤┐р┤ор┤гр╡Нр┤гр╡Н р┤╡р╡Жр┤│р╡Нр┤│р┤В р┤ир┤ир╡Нр┤ир┤╛р┤пр┤┐ р┤ир┤┐р┤▓р┤ир┤┐р╡╝р┤др╡Нр┤др╡Бр┤ир╡Нр┤ир╡Б р┤кр┤Хр╡Нр┤╖р╡З р┤кр┤др╡Бр┤Хр╡Нр┤Хр╡Ж р┤Тр┤┤р╡Бр┤Хр╡Бр┤ир╡Нр┤ир╡Б. р┤ир╡Жр┤▓р╡Нр┤▓р╡Бр┤Хр╡Гр┤╖р┤┐р┤Хр╡Нр┤Хр╡Н р┤ир┤▓р╡Нр┤▓р┤др╡Н. р┤бр╡Нр┤░р╡Жр┤пр┤┐р┤ир╡Зр┤Ьр╡Н р┤ор╡Жр┤Ър╡Нр┤Ър┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤др╡Нр┤др┤╛р╡╗ р┤Ьр╡Ир┤╡р┤╡р┤╕р╡Нр┤др╡Бр┤Хр╡Нр┤Хр╡╛ р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х."
        },
        "sandy": {
            "en": "Sandy soil drains quickly but requires frequent irrigation. Good for root vegetables. Add compost to retain nutrients. Suitable for crops like carrots, potatoes, onions.",
            "ta": "роорогро▓рпН роорогрпН ро╡ро┐ро░рпИро╡ро╛роХ ро╡роЯро┐роХро┐ро▒родрпБ роЖройро╛ро▓рпН роЕроЯро┐роХрпНроХроЯро┐ роирпАро░рпНрокрпНрокро╛роЪройроорпН родрпЗро╡рпИ. ро╡рпЗро░рпН роХро╛ропрпНроХро▒ро┐роХро│рпБроХрпНроХрпБ роиро▓рпНро▓родрпБ. роКроЯрпНроЯроЪрпНроЪродрпНродрпБроХрпНроХро│рпИ родроХрпНроХро╡рпИроХрпНроХ роХроорпНрокрпЛро╕рпНроЯрпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН.",
            "te": "р░Зр░╕р▒Бр░Х р░ор░Яр▒Нр░Яр░┐ р░др▒Нр░╡р░░р░Чр░╛ р░кр░╛р░░р░┐р░кр▒Лр░др▒Бр░Вр░жр░┐ р░Хр░╛р░ир▒А р░др░░р░Ър▒Бр░Чр░╛ р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓ р░Ер░╡р░╕р░░р░В. р░╡р▒Зр░░р▒Н р░Хр▒Вр░░р░Чр░╛р░пр░▓р░Хр▒Б р░ор░Вр░Ър░┐р░жр░┐. р░кр▒Лр░╖р░Хр░╛р░▓р░ир▒Б р░ир░┐р░▓р▒Бр░кр▒Бр░Хр▒Лр░╡р░бр░╛р░ир░┐р░Хр░┐ р░Хр░Вр░кр▒Лр░╕р▒Нр░Яр▒Н р░Ър▒Зр░░р▒Нр░Ър░Вр░бр░┐.",
            "ml": "р┤ор┤гр╡╜р┤ор┤гр╡Нр┤гр╡Н р┤╡р╡Зр┤Чр┤др╡Нр┤др┤┐р╡╜ р┤Тр┤┤р╡Бр┤Хр╡Бр┤ир╡Нр┤ир╡Б р┤кр┤Хр╡Нр┤╖р╡З р┤Зр┤Яр┤пр╡Нр┤Хр╡Нр┤Хр┤┐р┤Яр╡Ж р┤ир┤ир┤пр╡Нр┤Хр╡Нр┤Хр╡Зр┤гр╡Нр┤Яр┤др╡Бр┤гр╡Нр┤Яр╡Н. р┤▒р╡Вр┤Яр╡Нр┤Яр╡Н р┤кр┤Ър╡Нр┤Ър┤Хр╡Нр┤Хр┤▒р┤┐р┤Хр╡╛р┤Хр╡Нр┤Хр╡Н р┤ир┤▓р╡Нр┤▓р┤др╡Н. р┤кр╡Лр┤╖р┤Хр┤Щр╡Нр┤Щр╡╛ р┤ир┤┐р┤▓р┤ир┤┐р╡╝р┤др╡Нр┤др┤╛р╡╗ р┤Хр┤ор╡Нр┤кр╡Лр┤╕р╡Нр┤▒р╡Нр┤▒р╡Н р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х."
        },
        "loamy": {
            "en": "Loamy soil is ideal for most crops. Perfect balance of drainage and retention. Rich in nutrients. Suitable for vegetables, fruits, grains. Maintain with organic matter.",
            "ta": "роХро│ро┐ржорогрпН роХро▓роирпНрод роорогрпН рокрпЖро░рпБроорпНрокро╛ро▓ро╛рой рокропро┐ро░рпНроХро│рпБроХрпНроХрпБ роПро▒рпНро▒родрпБ. ро╡роЯро┐роХро╛ро▓рпН рооро▒рпНро▒рпБроорпН родроХрпНроХро╡рпИрокрпНрокро┐ройрпН роЪро░ро┐ропро╛рой роЪроороиро┐ро▓рпИ. роКроЯрпНроЯроЪрпНроЪродрпНродрпБ роиро┐ро▒рпИроирпНродродрпБ.",
            "te": "р░▓р▒Зр░д р░ор░Яр▒Нр░Яр░┐ р░Ър░╛р░▓р░╛ р░кр░Вр░Яр░▓р░Хр▒Б р░Ер░ир▒Бр░╡р▒Ир░ир░жр░┐. р░бр▒Нр░░р▒Ир░ир▒Зр░Ьр▒Н р░ор░░р░┐р░пр▒Б р░░р░┐р░Яр▒Жр░ир▒Нр░╖р░ир▒Н р░пр▒Кр░Хр▒Нр░Х р░кр░░р░┐р░кр▒Вр░░р▒Нр░г р░╕р░ор░др▒Бр░▓р▒Нр░пр░д. р░кр▒Лр░╖р░Хр░╛р░▓р░др▒Л р░╕р░ор▒Гр░жр▒Нр░зр░┐р░Чр░╛ р░Йр░Вр░Яр▒Бр░Вр░жр░┐.",
            "ml": "р┤кр┤╢р┤┐р┤ор┤ор┤гр╡Нр┤гр╡Н р┤ор┤┐р┤Хр╡Нр┤Х р┤╡р┤┐р┤│р┤Хр╡╛р┤Хр╡Нр┤Хр╡Бр┤В р┤Ер┤ир╡Бр┤пр╡Лр┤Ьр╡Нр┤пр┤В. р┤бр╡Нр┤░р╡Жр┤пр┤┐р┤ир╡Зр┤Ьр┤┐р┤ир╡Нр┤▒р╡Жр┤пр╡Бр┤В р┤ир┤┐р┤▓р┤ир┤┐р╡╝р┤др╡Нр┤др┤▓р┤┐р┤ир╡Нр┤▒р╡Жр┤пр╡Бр┤В р┤ор┤┐р┤Хр┤Ър╡Нр┤Ъ р┤╕р┤ир╡Нр┤др╡Бр┤▓р┤ир┤В. р┤кр╡Лр┤╖р┤Хр┤Щр╡Нр┤Щр┤│р┤╛р╡╜ р┤╕р┤ор╡Гр┤жр╡Нр┤зр┤В."
        }
    },
    "irrigation": {
        "drip": {
            "en": "Drip irrigation saves 30-50% water. Delivers water directly to plant roots. Reduces weed growth. Initial investment high but long-term savings. Best for row crops and orchards.",
            "ta": "роЪрпКроЯрпНроЯрпБ роирпАро░рпНрокрпНрокро╛роЪройроорпН 30-50% роирпАро░рпИ роЪрпЗрооро┐роХрпНроХро┐ро▒родрпБ. родро╛ро╡ро░ ро╡рпЗро░рпНроХро│рпБроХрпНроХрпБ роирпЗро░роЯро┐ропро╛роХ роирпАро░рпН ро╡ро┤роЩрпНроХрпБроХро┐ро▒родрпБ. роХро│рпИ ро╡ро│ро░рпНроЪрпНроЪро┐ропрпИ роХрпБро▒рпИроХрпНроХро┐ро▒родрпБ.",
            "te": "р░бр▒Нр░░р░┐р░кр▒Н р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓ 30-50% р░ир▒Ар░Яр░┐р░ир░┐ р░Жр░жр░╛ р░Ър▒Зр░╕р▒Нр░др▒Бр░Вр░жр░┐. р░ор▒Кр░Хр▒Нр░Хр░▓ р░╡р▒Зр░░р▒Нр░▓р░Хр▒Б р░ир▒Зр░░р▒Бр░Чр░╛ р░ир▒Ар░Яр░┐р░ир░┐ р░Ер░Вр░жр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐. р░Хр░▓р▒Бр░кр▒Б р░ор▒Кр░Хр▒Нр░Хр░▓ р░кр▒Жр░░р▒Бр░Чр▒Бр░жр░▓р░ир▒Б р░др░Чр▒Нр░Чр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐.",
            "ml": "р┤бр╡Нр┤░р┤┐р┤кр╡Нр┤кр╡Н р┤Ьр┤▓р┤╕р╡Зр┤Ър┤ир┤В 30-50% р┤╡р╡Жр┤│р╡Нр┤│р┤В р┤▓р┤╛р┤нр┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б. р┤Ър╡Жр┤Яр┤┐р┤Хр┤│р╡Бр┤Яр╡Ж р┤╡р╡Зр┤░р╡Бр┤Хр┤│р┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤ир╡Зр┤░р┤┐р┤Яр╡Нр┤Яр╡Н р┤╡р╡Жр┤│р╡Нр┤│р┤В р┤Ор┤др╡Нр┤др┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б. р┤Хр┤│р┤Хр┤│р╡Бр┤Яр╡Ж р┤╡р┤│р╡╝р┤Ър╡Нр┤Ъ р┤Хр╡Бр┤▒р┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б."
        },
        "sprinkler": {
            "en": "Sprinkler irrigation covers large areas efficiently. Good for uniform water distribution. Suitable for most field crops. Requires good water pressure. Can be automated easily.",
            "ta": "родрпЖро│ро┐рокрпНрокрпБ роирпАро░рпНрокрпНрокро╛роЪройроорпН рокрпЖро░ро┐роп рокроХрпБродро┐роХро│рпИ родро┐ро▒роорпИропро╛роХ роорпВроЯрпБроХро┐ро▒родрпБ. роЪрпАро░ро╛рой роирпАро░рпН ро╡ро┐роиро┐ропрпЛроХродрпНродро┐ро▒рпНроХрпБ роиро▓рпНро▓родрпБ. рокрпЖро░рпБроорпНрокро╛ро▓ро╛рой ро╡ропро▓рпН рокропро┐ро░рпНроХро│рпБроХрпНроХрпБ роПро▒рпНро▒родрпБ.",
            "te": "р░╕р▒Нр░кр▒Нр░░р░┐р░Вр░Хр▒Нр░▓р░░р▒Н р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓ р░кр▒Жр░жр▒Нр░ж р░кр▒Нр░░р░╛р░Вр░др░╛р░▓р░ир▒Б р░╕р░ор░░р▒Нр░ер░╡р░Вр░др░Вр░Чр░╛ р░Хр░╡р░░р▒Н р░Ър▒Зр░╕р▒Нр░др▒Бр░Вр░жр░┐. р░Пр░Хр░░р▒Ар░др░┐ р░ир▒Ар░Яр░┐ р░кр░Вр░кр░┐р░гр▒Ар░Хр░┐ р░ор░Вр░Ър░┐р░жр░┐. р░Ър░╛р░▓р░╛ р░╡р░░р░▓ р░кр░Вр░Яр░▓р░Хр▒Б р░Ер░ир▒Бр░Хр▒Вр░▓р░В.",
            "ml": "р┤╕р╡Нр┤кр╡Нр┤░р┤┐р┤Щр╡Нр┤Хр╡Нр┤│р╡╝ р┤Ьр┤▓р┤╕р╡Зр┤Ър┤ир┤В р┤╡р┤▓р┤┐р┤п р┤кр╡Нр┤░р┤жр╡Зр┤╢р┤Щр╡Нр┤Щр┤│р╡Ж р┤Хр┤╛р┤░р╡Нр┤пр┤Хр╡Нр┤╖р┤ор┤ор┤╛р┤пр┤┐ р┤ор╡Вр┤Яр╡Бр┤ир╡Нр┤ир╡Б. р┤Пр┤Хр╡Ар┤Хр╡Гр┤д р┤Ьр┤▓ р┤╡р┤┐р┤др┤░р┤гр┤др╡Нр┤др┤┐р┤ир╡Н р┤ир┤▓р╡Нр┤▓р┤др╡Н. р┤ор┤┐р┤Хр╡Нр┤Х р┤╡р┤пр╡╜ р┤╡р┤┐р┤│р┤Хр╡╛р┤Хр╡Нр┤Хр╡Бр┤В р┤Ер┤ир╡Бр┤пр╡Лр┤Ьр╡Нр┤пр┤В."
        }
    },
    "diseases": {
        "blight": {
            "en": "Blight causes dark spots on leaves and stems. Caused by fungal infection. Remove affected parts immediately. Use copper-based fungicides. Ensure good air circulation.",
            "ta": "роХро░рпБроорпИ роирпЛропрпН роЗро▓рпИроХро│рпН рооро▒рпНро▒рпБроорпН родрогрпНроЯрпБроХро│ро┐ро▓рпН роХро░рпБроорпИропро╛рой рокрпБро│рпНро│ро┐роХро│рпИ роПро▒рпНрокроЯрпБродрпНродрпБроХро┐ро▒родрпБ. рокрпВроЮрпНроЪрпИ родрпКро▒рпНро▒ро╛ро▓рпН роПро▒рпНрокроЯрпБроХро┐ро▒родрпБ. рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ рокроХрпБродро┐роХро│рпИ роЙроЯройрпЗ роЕроХро▒рпНро▒ро╡рпБроорпН.",
            "te": "р░мр▒Нр░▓р▒Ир░Яр▒Н р░Жр░Хр▒Бр░▓р▒Б р░ор░░р░┐р░пр▒Б р░Хр░╛р░Вр░бр░╛р░▓р░кр▒И р░ор▒Бр░жр▒Бр░░р▒Б р░ор░Ър▒Нр░Ър░▓р░ир▒Б р░Хр░▓р░┐р░Чр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐. р░лр░Вр░Чр░▓р▒Н р░Зр░ир▒Нр░лр▒Жр░Хр▒Нр░╖р░ир▒Н р░╡р░▓р▒Нр░▓ р░Хр░▓р▒Бр░Чр▒Бр░др▒Бр░Вр░жр░┐. р░кр▒Нр░░р░нр░╛р░╡р░┐р░д р░нр░╛р░Чр░╛р░▓р░ир▒Б р░╡р▒Жр░Вр░Яр░ир▒З р░др▒Кр░▓р░Чр░┐р░Вр░Ър░Вр░бр░┐.",
            "ml": "р┤мр╡Нр┤▓р╡Ир┤▒р╡Нр┤▒р╡Н р┤Зр┤▓р┤Хр┤│р┤┐р┤▓р╡Бр┤В р┤др┤гр╡Нр┤Яр╡Бр┤Хр┤│р┤┐р┤▓р╡Бр┤В р┤Зр┤░р╡Бр┤гр╡Нр┤Я р┤кр┤╛р┤Яр╡Бр┤Хр╡╛ р┤Йр┤гр╡Нр┤Яр┤╛р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б. р┤лр┤Вр┤Чр╡╜ р┤Ер┤гр╡Бр┤мр┤╛р┤з р┤ор╡Вр┤▓р┤ор┤╛р┤гр╡Н р┤Зр┤др╡Н р┤╕р┤Вр┤нр┤╡р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир┤др╡Н. р┤мр┤╛р┤зр┤┐р┤д р┤нр┤╛р┤Чр┤Щр╡Нр┤Щр╡╛ р┤Йр┤Яр┤ир╡Ж р┤ир╡Ар┤Хр╡Нр┤Хр┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х."
        }
    }
}

# TF-IDF Vectorizer for RAG
vectorizer = TfidfVectorizer(stop_words='english', max_features=1000)

# Initialize knowledge base vectors
def initialize_rag():
    """Initialize RAG system with agriculture knowledge base"""
    global kb_vectors, kb_texts, kb_keys
    
    # Flatten knowledge base for vectorization
    kb_texts = []
    kb_keys = []
    
    for category, items in AGRICULTURE_KB.items():
        for item, langs in items.items():
            # Use English text for vectorization
            kb_texts.append(langs['en'])
            kb_keys.append((category, item))
    
    # Create TF-IDF vectors
    kb_vectors = vectorizer.fit_transform(kb_texts)
    logger.info(f"тЬЕ RAG initialized with {len(kb_texts)} knowledge entries")

# Initialize RAG on startup
initialize_rag()

class QueryRequest(BaseModel):
    query: str
    language: str = "en"
    mode: str = "direct"
    user_type: str = "farmer"  # farmer, expert, student
    crop_type: str = ""
    land_size: str = ""
    soil_type: str = ""

def get_rag_context(query: str, language: str = "en", top_k: int = 3):
    """Get relevant context from knowledge base using RAG"""
    try:
        # Vectorize the query
        query_vector = vectorizer.transform([query])
        
        # Calculate similarities
        similarities = cosine_similarity(query_vector, kb_vectors)[0]
        
        # Get top-k most similar entries
        top_indices = similarities.argsort()[-top_k:][::-1]
        
        relevant_context = []
        for idx in top_indices:
            if similarities[idx] > 0.1:  # Minimum similarity threshold
                category, item = kb_keys[idx]
                context_data = AGRICULTURE_KB[category][item]
                
                # Get content in requested language
                content = context_data.get(language, context_data['en'])
                relevant_context.append({
                    'category': category,
                    'item': item,
                    'content': content,
                    'similarity': float(similarities[idx])
                })
        
        return relevant_context
    except Exception as e:
        logger.error(f"RAG error: {e}")
        return []

@app.get("/", response_class=HTMLResponse)
async def home():
    return """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
        <title>ЁЯМ╛ Fast Agriculture AI - Smart Assistant</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
                -webkit-tap-highlight-color: transparent;
            }
            body {
                font-family: 'Segoe UI', 'Roboto', sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                color: white;
                padding: 10px;
                overflow-x: hidden;
            }
            .container {
                max-width: 400px;
                margin: 0 auto;
                padding: 0 10px;
            }
            .header {
                text-align: center;
                margin-bottom: 20px;
                padding: 20px 0;
            }
            .header h1 {
                font-size: 2.2em;
                margin-bottom: 5px;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }
            .subtitle {
                font-size: 1em;
                opacity: 0.9;
                margin-bottom: 10px;
            }
            .demo-section {
                background: rgba(255, 255, 255, 0.15);
                border-radius: 15px;
                padding: 20px;
                margin: 15px 0;
                backdrop-filter: blur(10px);
            }
            .section-title {
                font-size: 1.3em;
                margin-bottom: 15px;
                text-align: center;
                color: #FFD700;
                font-weight: bold;
            }
            .option-grid {
                display: grid;
                grid-template-columns: 1fr;
                gap: 12px;
                margin-bottom: 20px;
            }
            .option-button {
                background: rgba(255, 255, 255, 0.2);
                border: 2px solid rgba(255, 255, 255, 0.3);
                border-radius: 12px;
                padding: 15px;
                color: white;
                font-size: 1.1em;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
                text-align: center;
                min-height: 60px;
                display: flex;
                align-items: center;
                justify-content: center;
                text-decoration: none;
            }
            .option-button:hover, .option-button.selected {
                background: rgba(255, 255, 255, 0.3);
                border-color: #FFD700;
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            }
            .option-button.selected {
                background: #FFD700;
                color: #333;
            }
            .quick-questions {
                display: grid;
                grid-template-columns: 1fr;
                gap: 10px;
            }
            .quick-question {
                background: rgba(76, 175, 80, 0.8);
                border: none;
                border-radius: 10px;
                padding: 12px;
                color: white;
                font-size: 1em;
                cursor: pointer;
                transition: all 0.3s ease;
                text-align: left;
                line-height: 1.4;
            }
            .quick-question:hover {
                background: rgba(76, 175, 80, 1);
                transform: translateY(-1px);
            }
            .input-section {
                margin: 20px 0;
            }
            .input-group {
                display: flex;
                flex-direction: column;
                gap: 12px;
                margin-bottom: 15px;
            }
            input, select, textarea {
                padding: 15px;
                border: none;
                border-radius: 10px;
                font-size: 16px;
                background: rgba(255, 255, 255, 0.9);
                color: #333;
                width: 100%;
            }
            textarea {
                min-height: 80px;
                resize: vertical;
            }
            .action-buttons {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 10px;
                margin: 15px 0;
            }
            .btn {
                padding: 15px;
                border: none;
                border-radius: 10px;
                font-size: 1.1em;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
                text-align: center;
            }
            .btn-primary {
                background: #4CAF50;
                color: white;
            }
            .btn-secondary {
                background: #FF9800;
                color: white;
            }
            .btn-voice {
                background: #2196F3;
                color: white;
            }
            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            }
            .response {
                background: rgba(255, 255, 255, 0.1);
                border-radius: 12px;
                padding: 20px;
                margin: 20px 0;
                min-height: 100px;
                white-space: pre-wrap;
                line-height: 1.6;
                font-size: 1.1em;
            }
            .loading {
                animation: pulse 1.5s infinite;
                text-align: center;
                font-size: 1.2em;
            }
            @keyframes pulse {
                0% { opacity: 1; }
                50% { opacity: 0.7; }
                100% { opacity: 1; }
            }
            .demo-info {
                background: rgba(76, 175, 80, 0.2);
                border-left: 4px solid #4CAF50;
                padding: 15px;
                margin: 15px 0;
                border-radius: 0 10px 10px 0;
                font-size: 0.95em;
            }
            .status-bar {
                background: rgba(0, 0, 0, 0.2);
                padding: 10px;
                border-radius: 8px;
                margin: 10px 0;
                font-size: 0.9em;
                text-align: center;
            }
            @media (max-width: 480px) {
                .header h1 { font-size: 1.8em; }
                .container { padding: 0 5px; }
                .demo-section { padding: 15px; }
                .action-buttons { grid-template-columns: 1fr; }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>ЁЯМ╛ Agriculture AI</h1>
                <div class="subtitle">ЁЯОд Whisper + я┐╜ Smart Assistant + ЁЯФК gTTS</div>
            </div>

            <div class="demo-info">
                <strong>ЁЯОп Enhanced Features:</strong><br>
                ЁЯОд Whisper: Accurate speech recognition<br>
                ЁЯдЦ Smart Assistant: FAST practical advice<br>
                ЁЯФК gTTS: High-quality Google TTS for Indian languages<br>
                ЁЯМ╛ RAG: Agriculture knowledge base<br>
                тЪб <strong>NO MORE SLOW AI! Direct practical help!</strong>
            </div>

            <!-- Language Selection -->
            <div class="demo-section">
                <div class="section-title">1я╕ПтГг Select Language</div>
                <div class="option-grid">
                    <button class="option-button" onclick="selectLanguage('en')" id="lang-en">
                        ЁЯЗ║ЁЯЗ╕ English
                    </button>
                    <button class="option-button" onclick="selectLanguage('ta')" id="lang-ta">
                        ЁЯЗоЁЯЗ│ родрооро┐ро┤рпН (Tamil)
                    </button>
                    <button class="option-button" onclick="selectLanguage('te')" id="lang-te">
                        ЁЯЗоЁЯЗ│ р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)
                    </button>
                    <button class="option-button" onclick="selectLanguage('ml')" id="lang-ml">
                        ЁЯЗоЁЯЗ│ р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)
                    </button>
                </div>
            </div>

            <!-- User Profile -->
            <div class="demo-section">
                <div class="section-title">2я╕ПтГг Your Profile</div>
                <div class="option-grid">
                    <button class="option-button" onclick="selectProfile('farmer')" id="profile-farmer">
                        ЁЯСитАНЁЯМ╛ Farmer
                    </button>
                    <button class="option-button" onclick="selectProfile('expert')" id="profile-expert">
                        ЁЯФм Agriculture Expert
                    </button>
                    <button class="option-button" onclick="selectProfile('student')" id="profile-student">
                        ЁЯОУ Student/Learner
                    </button>
                </div>
            </div>

            <!-- Land Details -->
            <div class="demo-section">
                <div class="section-title">3я╕ПтГг Land Details</div>
                <div class="input-group">
                    <select id="cropType">
                        <option value="">Select Main Crop</option>
                        <option value="rice">ЁЯМ╛ Rice</option>
                        <option value="wheat">ЁЯМ╛ Wheat</option>
                        <option value="sugarcane">ЁЯОЛ Sugarcane</option>
                        <option value="vegetables">ЁЯем Vegetables</option>
                        <option value="fruits">ЁЯНО Fruits</option>
                        <option value="other">ЁЯМ▒ Other</option>
                    </select>
                    <select id="landSize">
                        <option value="">Select Land Size</option>
                        <option value="small">ЁЯПа Small (< 2 acres)</option>
                        <option value="medium">ЁЯПб Medium (2-10 acres)</option>
                        <option value="large">ЁЯПн Large (> 10 acres)</option>
                    </select>
                    <select id="soilType">
                        <option value="">Select Soil Type</option>
                        <option value="clay">ЁЯЯд Clay Soil</option>
                        <option value="sandy">ЁЯЯи Sandy Soil</option>
                        <option value="loamy">ЁЯЯл Loamy Soil</option>
                        <option value="other">тЭУ Not Sure</option>
                    </select>
                </div>
            </div>

            <!-- Quick Questions -->
            <div class="demo-section">
                <div class="section-title">4я╕ПтГг Quick Questions</div>
                <div class="quick-questions">
                    <button class="quick-question" onclick="askQuickQuestion('What is the best crop for my soil type?')">
                        ЁЯМ▒ What crop is best for my soil?
                    </button>
                    <button class="quick-question" onclick="askQuickQuestion('How much water does my crop need?')">
                        ЁЯТз Water requirements for crops
                    </button>
                    <button class="quick-question" onclick="askQuickQuestion('What fertilizer should I use?')">
                        ЁЯзк Best fertilizers to use
                    </button>
                    <button class="quick-question" onclick="askQuickQuestion('How to prevent crop diseases?')">
                        ЁЯжа Disease prevention tips
                    </button>
                    <button class="quick-question" onclick="askQuickQuestion('When is the best time to plant?')">
                        ЁЯУЕ Best planting seasons
                    </button>
                </div>
            </div>

            <!-- Custom Question -->
            <div class="demo-section">
                <div class="section-title">ЁЯУЭ Ask Your Question</div>
                <div class="input-section">
                    <textarea id="queryInput" placeholder="Type your agriculture question here..."></textarea>
                    <div class="action-buttons">
                        <button class="btn btn-primary" onclick="askAI()">ЁЯЪА Ask Smart Assistant</button>
                        <button class="btn btn-voice" onclick="startWhisperInput()">ЁЯОд Whisper</button>
                    </div>
                    <button class="btn btn-secondary" onclick="testTTS()" style="width: 100%; margin-top: 10px;">
                        ЁЯФК Test gTTS (Google TTS)
                    </button>
                    <button class="btn btn-secondary" onclick="testPhoneticTamil()" style="width: 100%; margin-top: 5px; background: #e53e3e;">
                        ЁЯОп Test Tamil Script (Native pronunciation)
                    </button>
                </div>
            </div>

            <!-- Status Bar -->
            <div class="status-bar" id="statusBar">
                ЁЯЯв Ready | Smart Assistant + Whisper + gTTS | Language: English
            </div>

            <!-- Response Area -->
            <div id="response" class="response">
                Welcome to Agriculture AI v3.0! ЁЯМ╛<br><br>
                <strong>New Stack:</strong><br>
                ЁЯОд Whisper: Accurate speech-to-text<br>
                я┐╜ Smart Assistant: FAST practical advice<br>
                ЁЯФК pyttsx3: Offline text-to-speech<br>
                ЁЯМ╛ RAG: Agriculture knowledge base<br><br>
                <strong>100% FREE & OFFLINE!</strong>
            </div>
        </div>

        <script>
            let selectedLanguage = 'en';
            let selectedProfile = '';

            // Language selection
            function selectLanguage(lang) {
                selectedLanguage = lang;
                document.querySelectorAll('[id^="lang-"]').forEach(btn => btn.classList.remove('selected'));
                document.getElementById(`lang-${lang}`).classList.add('selected');
                updateStatusBar();
                console.log(`ЁЯМН Language selected: ${lang}`);
            }

            // Profile selection
            function selectProfile(profile) {
                selectedProfile = profile;
                document.querySelectorAll('[id^="profile-"]').forEach(btn => btn.classList.remove('selected'));
                document.getElementById(`profile-${profile}`).classList.add('selected');
                updateStatusBar();
                console.log(`ЁЯСд Profile selected: ${profile}`);
            }

            // Update status bar
            function updateStatusBar() {
                const langNames = {
                    'en': 'English',
                    'ta': 'Tamil',
                    'te': 'Telugu',
                    'ml': 'Malayalam'
                };
                
                const status = `ЁЯЯв Ready | Smart Assistant + Whisper + gTTS | Language: ${langNames[selectedLanguage]}`;
                document.getElementById('statusBar').textContent = status;
            }

            // Quick question handler
            function askQuickQuestion(question) {
                document.getElementById('queryInput').value = question;
                askAI();
            }

            // Get user details
            function getUserDetails() {
                return {
                    cropType: document.getElementById('cropType').value,
                    landSize: document.getElementById('landSize').value,
                    soilType: document.getElementById('soilType').value
                };
            }

            // MAIN FUNCTION - Ask AI with Smart Assistant + RAG
            async function askAI() {
                console.log('ЁЯЪА askAI function called with Smart Assistant');
                
                const query = document.getElementById('queryInput').value;
                const responseDiv = document.getElementById('response');
                const details = getUserDetails();

                if (!query.trim()) {
                    alert('Please enter a question about agriculture!');
                    return;
                }

                console.log(`ЁЯУЭ Query: "${query}" in language: ${selectedLanguage}`);
                responseDiv.innerHTML = '<div class="loading">я┐╜ Smart Assistant is thinking with RAG...</div>';

                try {
                    const requestData = {
                        query: query,
                        language: selectedLanguage,
                        mode: 'rag',
                        user_type: selectedProfile,
                        crop_type: details.cropType,
                        land_size: details.landSize,
                        soil_type: details.soilType
                    };

                    const response = await fetch('/query', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(requestData)
                    });

                    const data = await response.json();
                    console.log('тЬЕ Received Smart Assistant response:', data);
                    
                    let responseText = `<strong>я┐╜ Smart Assistant + RAG Response:</strong>\\n\\n${data.answer}`;
                    
                    if (data.rag_sources && data.rag_sources.length > 0) {
                        responseText += `\\n\\nЁЯУЪ <strong>Knowledge Sources:</strong>\\n`;
                        data.rag_sources.forEach((source, idx) => {
                            responseText += `${idx + 1}. ${source.category.toUpperCase()}: ${source.item}\\n`;
                        });
                    }
                    
                    responseText += `\\n<hr style="border: 1px solid rgba(255,255,255,0.3); margin: 15px 0;">`;
                    responseText += `ЁЯУК Model: ${data.model} | тП▒я╕П Time: ${data.processing_time_ms}ms | ЁЯФЧ Sources: ${data.rag_sources ? data.rag_sources.length : 0}`;
                    
                    responseDiv.innerHTML = responseText;

                    // Use pyttsx3 TTS
                    if (data.answer) {
                        console.log(`ЁЯФК Starting pyttsx3 TTS: "${data.answer.substring(0, 50)}..."`);
                        await speakWithPyttsx3(data.answer, selectedLanguage);
                    }

                } catch (error) {
                    console.error('тЭМ Error:', error);
                    responseDiv.innerHTML = `тЭМ Error: ${error.message}`;
                }
            }

            // Enhanced pyttsx3 TTS function
            async function speakWithPyttsx3(text, language) {
                console.log(`ЁЯФК Using pyttsx3 TTS for ${language}`);
                
                try {
                    const ttsResponse = await fetch('/generate-tts', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            text: text,
                            language: language
                        })
                    });
                    
                    const ttsData = await ttsResponse.json();
                    
                    if (ttsData.success && ttsData.audio_base64) {
                        console.log(`тЬЕ Using ${ttsData.service} (${ttsData.voice})`);
                        
                        // Create audio element and play (supports both WAV and MP3)
                        const audio = new Audio();
                        const audioFormat = ttsData.audio_format || 'wav';
                        audio.src = `data:audio/${audioFormat};base64,${ttsData.audio_base64}`;
                        
                        return new Promise((resolve) => {
                            audio.onended = () => {
                                console.log('тЬЕ pyttsx3 TTS completed successfully');
                                resolve();
                            };
                            
                            audio.onerror = (error) => {
                                console.error('тЭМ Audio playback error:', error);
                                resolve();
                            };
                            
                            audio.play().catch(error => {
                                console.error('тЭМ Audio play error:', error);
                                resolve();
                            });
                        });
                    } else {
                        console.log('ЁЯФД pyttsx3 not available, no TTS');
                    }
                    
                } catch (error) {
                    console.error('тЭМ TTS request failed:', error);
                }
            }

            // Whisper speech input function
            async function startWhisperInput() {
                console.log('ЁЯОд Starting Whisper input...');
                
                const responseDiv = document.getElementById('response');
                responseDiv.innerHTML = 'ЁЯОд Listening with Whisper... Speak your agriculture question!';
                
                try {
                    // Use Web API for audio capture
                    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                    const mediaRecorder = new MediaRecorder(stream);
                    const audioChunks = [];
                    
                    mediaRecorder.ondataavailable = (event) => {
                        audioChunks.push(event.data);
                    };
                    
                    mediaRecorder.onstop = async () => {
                        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                        const arrayBuffer = await audioBlob.arrayBuffer();
                        const base64Audio = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));
                        
                        console.log('ЁЯОд Audio captured, sending to Whisper...');
                        responseDiv.innerHTML = 'ЁЯОд Processing with Whisper...';
                        
                        try {
                            const response = await fetch('/whisper-transcribe', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    audio_data: base64Audio,
                                    language: selectedLanguage
                                })
                            });
                            
                            const data = await response.json();
                            
                            if (data.success) {
                                console.log(`тЬЕ Whisper transcription: "${data.transcribed_text}"`);
                                document.getElementById('queryInput').value = data.transcribed_text;
                                responseDiv.innerHTML = `ЁЯОд Whisper heard: "${data.transcribed_text}"\\n\\nClick "Ask Smart Assistant" to get an answer!`;
                            } else {
                                console.error('тЭМ Whisper failed:', data.error);
                                responseDiv.innerHTML = `тЭМ Whisper error: ${data.error}`;
                            }
                            
                        } catch (error) {
                            console.error('тЭМ Whisper request failed:', error);
                            responseDiv.innerHTML = `тЭМ Whisper request failed: ${error.message}`;
                        }
                        
                        // Stop all tracks
                        stream.getTracks().forEach(track => track.stop());
                    };
                    
                    // Record for 5 seconds
                    mediaRecorder.start();
                    setTimeout(() => {
                        if (mediaRecorder.state === 'recording') {
                            mediaRecorder.stop();
                        }
                    }, 5000);
                    
                } catch (error) {
                    console.error('тЭМ Microphone access failed:', error);
                    responseDiv.innerHTML = `тЭМ Microphone access failed: ${error.message}`;
                }
            }

            // Test phonetic Tamil function
            async function testPhoneticTamil() {
                const nativeTests = {
                    'en': 'Hello farmer. Rice is an important crop in agriculture.',
                    'ta': 'ро╡рогроХрпНроХроорпН ро╡ро┐ро╡роЪро╛ропро┐. роЕро░ро┐роЪро┐ роТро░рпБ роорпБроХрпНроХро┐роп рокропро┐ро░рпН.',
                    'te': 'р░ир░ор░╕р▒Нр░Хр░╛р░░р░В р░░р▒Ир░др▒Б. р░╡р░░р░┐ р░Тр░Х р░ор▒Бр░Цр▒Нр░пр░ор▒Ир░и р░кр░Вр░Я.',
                    'ml': 'р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В р┤Хр╡╝р┤╖р┤Хр┤╛. р┤Ер┤░р┤┐ р┤Тр┤░р╡Б р┤кр╡Нр┤░р┤зр┤╛р┤и р┤╡р┤┐р┤│.'
                };
                
                const testText = nativeTests[selectedLanguage] || nativeTests['en'];
                console.log(`ЁЯОп Testing native script: "${testText}"`);
                
                document.getElementById('response').innerHTML = `ЁЯОп Testing Native Script TTS...\\n\\n"${testText}"\\n\\nя┐╜ Using Google gTTS for perfect pronunciation...`;
                
                await speakWithPyttsx3(testText, selectedLanguage);
                document.getElementById('response').innerHTML += '\\nтЬЕ Native script TTS completed! ЁЯО╡';
            }

            // Test TTS function with gTTS
            async function testTTS() {
                const testTexts = {
                    'en': 'Hello farmer. This is a test of Google Text-to-Speech with perfect pronunciation.',
                    'ta': 'ро╡рогроХрпНроХроорпН ро╡ро┐ро╡роЪро╛ропро┐. роЗродрпБ роХрпВроХро┐ро│рпН рокрпЗроЪрпНроЪрпБ родрпКро┤ро┐ро▓рпНроирпБроЯрпНрок роЪрпЛродройрпИ.',
                    'te': 'р░ир░ор░╕р▒Нр░Хр░╛р░░р░В р░░р▒Ир░др▒Б. р░Зр░жр░┐ р░Чр▒Вр░Чр▒Бр░▓р▒Н р░╡р░╛р░пр░┐р░╕р▒Н р░Яр▒Жр░Хр▒Нр░ир░╛р░▓р░Ьр▒А р░Яр▒Жр░╕р▒Нр░Яр▒Н.',
                    'ml': 'р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В р┤Хр╡╝р┤╖р┤Хр┤╛. р┤Зр┤др╡Н р┤Чр╡Вр┤Чр┤┐р╡╛ р┤╡р╡Лр┤пр╡НтАМр┤╕р╡Н р┤Яр╡Жр┤Хр╡Нр┤ир╡Лр┤│р┤Ьр┤┐ р┤Яр╡Жр┤╕р╡Нр┤▒р╡Нр┤▒р╡Н.'
                };
                
                const testText = testTexts[selectedLanguage] || testTexts['en'];
                console.log(`ЁЯФК Testing gTTS: "${testText}"`);
                
                document.getElementById('response').innerHTML = `ЁЯФК Testing Google gTTS...\\n\\n"${testText}"\\n\\nЁЯО╡ Using native ${selectedLanguage} pronunciation...`;
                
                await speakWithPyttsx3(testText, selectedLanguage);
                document.getElementById('response').innerHTML += '\\nтЬЕ gTTS test completed perfectly!';
            }

            // Allow Enter key to submit
            document.getElementById('queryInput').addEventListener('keypress', function(event) {
                if (event.key === 'Enter') {
                    askAI();
                }
            });

            console.log('ЁЯЪА Agriculture AI v3.0 ready with Whisper + Smart Assistant + gTTS!');
        </script>
    </body>
    </html>
    """

@app.post("/query")
async def query_agriculture(request: QueryRequest):
    start_time = time.time()
    
    try:
        logger.info(f"ЁЯМ╛ Smart RAG Query: {request.query[:50]}... | Language: {request.language} | Profile: {request.user_type}")
        
        # Get RAG context
        rag_context = get_rag_context(request.query, request.language, top_k=3)
        
        # Fast Smart Agriculture Assistant - No more slow DialoGPT!
        def generate_smart_agriculture_answer(query, language, rag_context, user_context):
            """Generate practical agriculture answers directly from knowledge base"""
            
            # Build comprehensive answer from RAG context
            if rag_context:
                # Use the most relevant context
                best_match = rag_context[0]
                answer = best_match['content']
                
                # Add specific advice based on user context
                if user_context.get('soil_type') == 'clay' and 'rice' in query.lower():
                    if language == 'ta':
                        answer += " роХро│ро┐роорогрпН роорогрпНрогро┐ро▓рпН роирпЖро▓рпН роЪро╛роХрпБрокроЯро┐роХрпНроХрпБ роПро▒рпНро▒родрпБ. роиро▓рпНро▓ ро╡роЯро┐роХро╛ро▓рпН роЕроорпИрокрпНрокрпБ ро╡рпЗрогрпНроЯрпБроорпН."
                    else:
                        answer += " Clay soil is perfect for rice cultivation. Ensure proper drainage system."
                
                elif user_context.get('land_size') == 'small' and any(word in query.lower() for word in ['irrigation', 'water']):
                    if language == 'ta':
                        answer += " роЪро┐ро▒ро┐роп роиро┐ро▓родрпНродро┐ро▒рпНроХрпБ роЪрпКроЯрпНроЯрпБ роирпАро░рпНрокрпНрокро╛роЪройроорпН роЪро┐ро▒роирпНродродрпБ. 30-50% роирпАро░рпН роЪрпЗрооро┐рокрпНрокрпБ."
                    else:
                        answer += " For small farms, drip irrigation is ideal. Saves 30-50% water."
                
                # Add seasonal advice
                import datetime
                current_month = datetime.datetime.now().month
                
                if 6 <= current_month <= 10:  # Monsoon season
                    if language == 'ta':
                        answer += " родро▒рпНрокрпЛродрпБ роХро░рпАрокрпН рокро░рпБро╡роорпН. роирпЖро▓рпН, рокро░рпБродрпНродро┐ роироЯро╡рпБроХрпНроХрпБ роПро▒рпНро▒ роХро╛ро▓роорпН."
                    else:
                        answer += " Current Kharif season. Good time for rice, cotton planting."
                elif 11 <= current_month <= 4:  # Winter season
                    if language == 'ta':
                        answer += " родро▒рпНрокрпЛродрпБ ро░рокро┐ рокро░рпБро╡роорпН. роХрпЛродрпБроорпИ, роХроЯрпБроХрпБ ро╡ро┐родрпИрокрпНрокрпБроХрпНроХрпБ роПро▒рпНро▒ роХро╛ро▓роорпН."
                    else:
                        answer += " Current Rabi season. Good time for wheat, mustard sowing."
                
                return answer
            
            # Fallback responses with practical advice instead of "consult officials"
            practical_fallbacks = {
                'en': {
                    'general': "For general farming: 1) Test your soil pH (should be 6.0-7.5), 2) Use organic matter like compost, 3) Follow proper irrigation schedule, 4) Monitor for pests regularly. Need specific advice? Ask about your crop, soil type, or season.",
                    'fertilizer': "Use balanced NPK fertilizer. For most crops: Apply 40kg Urea + 25kg DAP + 15kg MOP per acre. Split urea application - half at sowing, rest after 30-45 days.",
                    'pest': "For pest control: 1) Use neem oil spray (5ml/liter), 2) Remove affected plant parts, 3) Maintain field hygiene, 4) Use yellow sticky traps for flying pests.",
                    'disease': "For plant diseases: 1) Ensure good air circulation, 2) Avoid overhead watering, 3) Remove infected parts immediately, 4) Use copper-based fungicides for fungal issues."
                },
                'ta': {
                    'general': "рокрпКродрпБро╡ро╛рой ро╡рпЗро│ро╛рогрпНроорпИроХрпНроХрпБ: 1) роорогрпНрогро┐ройрпН pH роЪрпЛродройрпИ роЪрпЖропрпНропро╡рпБроорпН (6.0-7.5 роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН), 2) роХроорпНрокрпЛро╕рпНроЯрпН рокрпЛройрпНро▒ роХро░ро┐роо рокрпКро░рпБроЯрпНроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН, 3) роЪро░ро┐ропро╛рой роирпАро░рпНрокрпНрокро╛роЪройроорпН, 4) родрпКроЯро░рпНроирпНродрпБ рокрпВроЪрпНроЪро┐роХро│рпИроХрпН роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН.",
                    'fertilizer': "роЪроороЪрпНроЪрпАро░рпН NPK роЙро░роорпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН. рокрпЖро░рпБроорпНрокро╛ро▓ро╛рой рокропро┐ро░рпНроХро│рпБроХрпНроХрпБ: роПроХрпНроХро░рпБроХрпНроХрпБ 40роХро┐ро▓рпЛ ропрпВро░ро┐ропро╛ + 25роХро┐ро▓рпЛ DAP + 15роХро┐ро▓рпЛ MOP.",
                    'pest': "рокрпВроЪрпНроЪро┐ роХроЯрпНроЯрпБрокрпНрокро╛роЯрпНроЯрпБроХрпНроХрпБ: 1) ро╡рпЗрокрпНрок роОрогрпНрогрпЖропрпН родрпЖро│ро┐рокрпНрокрпБ (5рооро┐.ро▓ро┐/ро▓ро┐роЯрпНроЯро░рпН), 2) рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ рокроХрпБродро┐роХро│рпИ роЕроХро▒рпНро▒ро╡рпБроорпН, 3) ро╡ропро▓рпН роЪрпБродрпНродроорпН, 4) роороЮрпНроЪро│рпН роиро┐ро▒ роТроЯрпНроЯрпБроорпН рокрпКро▒ро┐роХро│рпН.",
                    'disease': "родро╛ро╡ро░ роирпЛропрпНроХро│рпБроХрпНроХрпБ: 1) роиро▓рпНро▓ роХро╛ро▒рпНро▒рпЛроЯрпНроЯроорпН, 2) роЗро▓рпИроХро│ро┐ро▓рпН роирпЗро░роЯро┐ропро╛роХ родрогрпНрогрпАро░рпН роКро▒рпНро▒ро╛родрпАро░рпНроХро│рпН, 3) роирпЛропрпНро╡ро╛ропрпНрокрпНрокроЯрпНроЯ рокроХрпБродро┐роХро│рпИ роЙроЯройрпЗ роЕроХро▒рпНро▒ро╡рпБроорпН."
                }
            }
            
            # Determine response category
            query_lower = query.lower()
            if any(word in query_lower for word in ['fertilizer', 'urea', 'dap', 'nutrients']):
                category = 'fertilizer'
            elif any(word in query_lower for word in ['pest', 'insect', 'bug', 'spray']):
                category = 'pest'
            elif any(word in query_lower for word in ['disease', 'fungus', 'rot', 'blight']):
                category = 'disease'
            else:
                category = 'general'
            
            return practical_fallbacks.get(language, practical_fallbacks['en']).get(category, practical_fallbacks['en']['general'])
        
        # Generate fast, practical answer
        user_context = {
            "profile": request.user_type,
            "crop": request.crop_type,
            "land_size": request.land_size,
            "soil_type": request.soil_type
        }
        
        answer = generate_smart_agriculture_answer(
            request.query, 
            request.language, 
            rag_context, 
            user_context
        )
        
        processing_time = (time.time() - start_time) * 1000
        
        return {
            "answer": answer,
            "confidence": 0.95,  # Higher confidence since we're giving practical advice
            "processing_time_ms": round(processing_time),
            "language": request.language,
            "mode": "smart_agriculture_assistant",
            "model": "Fast Smart RAG",
            "rag_sources": [{"category": ctx['category'], "item": ctx['item'], "similarity": ctx['similarity']} for ctx in rag_context],
            "user_context": user_context
        }
        
    except Exception as e:
        logger.error(f"тЭМ Error: {str(e)}")
        
        # Even fallback gives practical advice
        practical_fallback = {
            'en': "I'm your agriculture assistant. For immediate help: 1) Soil issues - add organic matter, 2) Pest problems - use neem spray, 3) Fertilizer - use balanced NPK. Ask me specific questions about crops, soil, pests, or seasons!",
            'ta': "роиро╛ройрпН роЙроЩрпНроХро│рпН ро╡рпЗро│ро╛рогрпН роЙродро╡ро┐ропро╛ро│ро░рпН. роЙроЯройроЯро┐ роЙродро╡ро┐роХрпНроХрпБ: 1) роорогрпН рокро┐ро░роЪрпНроЪройрпИроХро│рпН - роХро░ро┐роо рокрпКро░рпБроЯрпНроХро│рпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН, 2) рокрпВроЪрпНроЪро┐ рокро┐ро░роЪрпНроЪройрпИроХро│рпН - ро╡рпЗрокрпНрок роОрогрпНрогрпЖропрпН родрпЖро│ро┐роХрпНроХро╡рпБроорпН, 3) роЙро░роорпН - роЪроороЪрпНроЪрпАро░рпН NPK рокропройрпНрокроЯрпБродрпНродро╡рпБроорпНред",
            'te': "р░ир▒Зр░ир▒Б р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр░ир▒Б. р░др░Хр▒Нр░╖р░г р░╕р░╣р░╛р░пр░В р░Хр▒Лр░╕р░В: 1) р░ор░Яр▒Нр░Яр░┐ р░╕р░ор░╕р▒Нр░пр░▓р▒Б - р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░кр░жр░╛р░░р▒Нр░ер░╛р░▓р▒Б р░Хр░▓р░кр░Вр░бр░┐, 2) р░Хр▒Ар░Яр░Хр░╛р░▓ р░╕р░ор░╕р▒Нр░пр░▓р▒Б - р░╡р▒Зр░к р░ир▒Вр░ир▒Ж р░╕р▒Нр░кр▒Нр░░р▒З р░Ър▒Зр░пр░Вр░бр░┐ред",
            'ml': "р┤Юр┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х р┤╕р┤╣р┤╛р┤пр┤┐р┤пр┤╛р┤гр╡Н. р┤Йр┤Яр┤ир┤Яр┤┐ р┤╕р┤╣р┤╛р┤пр┤др╡Нр┤др┤┐р┤ир╡Н: 1) р┤ор┤гр╡Нр┤гр┤┐р┤ир╡Нр┤▒р╡Ж р┤кр╡Нр┤░р┤╢р╡Нр┤ир┤Щр╡Нр┤Щр╡╛ - р┤Ьр╡Ир┤╡р┤╡р┤╕р╡Нр┤др╡Бр┤Хр╡Нр┤Хр╡╛ р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х, 2) р┤Хр╡Ар┤Яр┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤кр╡Нр┤░р┤╢р╡Нр┤ир┤Щр╡Нр┤Щр╡╛ - р┤╡р╡Зр┤кр╡Нр┤кр╡Жр┤гр╡Нр┤г р┤др┤│р┤┐р┤Хр╡Нр┤Хр╡Бр┤Хред"
        }
        
        return {
            "answer": practical_fallback.get(request.language, practical_fallback['en']),
            "confidence": 0.8,
            "processing_time_ms": round((time.time() - start_time) * 1000),
            "language": request.language,
            "mode": "emergency_fallback",
            "model": "Fast Smart RAG",
            "error": "minor_error_handled"
        }

@app.post("/whisper-transcribe")
async def whisper_transcribe(request: dict):
    """Transcribe audio using Whisper model"""
    try:
        audio_data = request.get("audio_data", "")
        language = request.get("language", "en")
        
        if not audio_data:
            raise HTTPException(status_code=400, detail="Audio data is required")
        
        logger.info(f"ЁЯОд Transcribing audio with Whisper for {language}")
        
        # Decode base64 audio data
        audio_bytes = base64.b64decode(audio_data)
        
        # Save to temporary file
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_audio:
            temp_audio.write(audio_bytes)
            temp_audio_path = temp_audio.name
        
        try:
            # Transcribe with Whisper
            result = whisper_model.transcribe(
                temp_audio_path,
                language=language if language != 'en' else None  # Let Whisper auto-detect if not English
            )
            
            transcribed_text = result["text"].strip()
            detected_language = result.get("language", language)
            
            logger.info(f"тЬЕ Whisper transcription: '{transcribed_text[:50]}...'")
            
            return {
                "success": True,
                "transcribed_text": transcribed_text,
                "detected_language": detected_language,
                "confidence": result.get("avg_logprob", 0.8)
            }
            
        finally:
            # Clean up temporary file
            if os.path.exists(temp_audio_path):
                os.unlink(temp_audio_path)
                
    except Exception as e:
        logger.error(f"тЭМ Whisper transcription failed: {e}")
        return {
            "success": False,
            "error": str(e),
            "message": "Whisper transcription failed"
        }

@app.post("/generate-tts")
async def generate_tts(request: dict):
    """Generate TTS using gTTS (Google Text-to-Speech) - Perfect for Indian languages"""
    try:
        text = request.get("text", "")
        language = request.get("language", "en")
        
        if not text:
            raise HTTPException(status_code=400, detail="Text is required")
        
        logger.info(f"ЁЯФК gTTS Request: {text[:50]}... in {language}")
        
        # Clean and prepare text
        text = re.sub(r'\s+', ' ', text.strip())
        text = text[:500]  # Limit length for gTTS
        
        # Map language codes for gTTS
        gtts_language_map = {
            'en': 'en',
            'ta': 'ta',
            'te': 'te', 
            'ml': 'ml',
            'hi': 'hi',
            'kn': 'kn',  # Kannada
            'bn': 'bn',  # Bengali
            'gu': 'gu',  # Gujarati
            'mr': 'mr',  # Marathi
            'pa': 'pa'   # Punjabi
        }
        
        gtts_lang = gtts_language_map.get(language, 'en')
        logger.info(f"ЁЯО╡ Using gTTS for {language} -> {gtts_lang}")
        
        # Generate TTS using gTTS
        tts = gTTS(text=text, lang=gtts_lang, slow=False)
        
        # Save to temporary file
        temp_audio = tempfile.mktemp(suffix=".mp3")
        tts.save(temp_audio)
        
        # Convert MP3 to base64 for web playback
        if os.path.exists(temp_audio) and os.path.getsize(temp_audio) > 0:
            with open(temp_audio, "rb") as audio_file:
                audio_base64 = base64.b64encode(audio_file.read()).decode('utf-8')
            
            # Clean up temporary file
            os.unlink(temp_audio)
            
            logger.info(f"тЬЕ gTTS generated successfully for {language}")
            
            return {
                "success": True,
                "audio_base64": audio_base64,
                "service": f"gTTS-{gtts_lang}",
                "voice": f"Google-{language}",
                "language": language,
                "audio_format": "mp3",
                "message": f"Generated high-quality gTTS for {language}"
            }
        else:
            raise Exception("gTTS failed to generate audio file")
            
    except Exception as e:
        logger.error(f"тЭМ gTTS generation failed: {e}")
        
        # Fallback to browser TTS
        return {
            "success": False,
            "use_browser_tts": True,
            "message": f"gTTS failed: {str(e)}. Using browser TTS fallback."
        }

if __name__ == "__main__":
    import uvicorn
    logger.info("ЁЯМ╛ Starting Agriculture AI with Whisper + Smart Assistant + gTTS...")
    logger.info("ЁЯО╡ Perfect Tamil/Telugu/Malayalam pronunciation with Google TTS!")
    logger.info("ЁЯЪА Server starting at http://localhost:8000")
    uvicorn.run(app, host="127.0.0.1", port=8000)
