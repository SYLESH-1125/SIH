from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import logging
import time
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import json
from pathlib import Path
from typing import Dict, List, Tuple
import base64
import tempfile
import os
import re

# Import the robust TTS stack with gTTS for Indian languages
import whisper
from transformers import pipeline
from gtts import gTTS
import platform

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load Whisper model (small = good balance of speed & accuracy)
logger.info("ЁЯОд Loading Whisper model (this may take a moment)...")
whisper_model = whisper.load_model("tiny")  # Using tiny model for faster loading
logger.info("тЬЕ Whisper model loaded successfully!")

# Skip DialoGPT - too slow and unhelpful!
logger.info("ЁЯМ╛ Using Fast Agriculture Assistant instead of DialoGPT...")

app = FastAPI(title="ЁЯМ╛ Fast Agriculture AI with Whisper + Smart RAG + gTTS", version="5.0.0")

# Comprehensive Global Agriculture Knowledge Base
FALLBACK_KB = {
    "crops": {
        # Cereals/Grains
        "rice": {
            "en": "Rice is a staple grain crop. Best grown in flooded fields. Requires 4-6 months growing season. Plant during monsoon. Harvest when grains turn golden. Major varieties: Basmati, Jasmine, Arborio.",
            "ta": "роЕро░ро┐роЪро┐ роТро░рпБ роорпБроХрпНроХро┐роп родро╛ройро┐роп рокропро┐ро░рпН. ро╡рпЖро│рпНро│роорпН роиро┐ро▒рпИроирпНрод ро╡ропро▓рпНроХро│ро┐ро▓рпН роЪро┐ро▒рокрпНрокро╛роХ ро╡ро│ро░рпБроорпН. 4-6 рооро╛род ро╡ро│ро░рпНроЪрпНроЪро┐ роХро╛ро▓роорпН родрпЗро╡рпИред рокро░рпБро╡рооро┤рпИроХрпН роХро╛ро▓родрпНродро┐ро▓рпН роироЯро╡рпБ роЪрпЖропрпНропро╡рпБроорпНред",
            "te": "р░╡р░░р░┐ р░кр▒Нр░░р░зр░╛р░и р░зр░╛р░ир▒Нр░п р░кр░Вр░Я. р░ир▒Ар░░р▒Б р░ир░┐р░Вр░бр░┐р░и р░кр▒Кр░▓р░╛р░▓р▒Нр░▓р▒Л р░мр░╛р░Чр░╛ р░кр▒Жр░░р▒Бр░Чр▒Бр░др▒Бр░Вр░жр░┐. 4-6 р░ир▒Жр░▓р░▓ р░кр▒Жр░░р▒Бр░Чр▒Бр░жр░▓ р░Хр░╛р░▓р░В р░Ер░╡роЪр░░р░В.",
            "ml": "р┤Ер┤░р┤┐ р┤Тр┤░р╡Б р┤кр╡Нр┤░р┤зр┤╛р┤и р┤зр┤╛р┤ир╡Нр┤п р┤╡р┤┐р┤│. р┤╡р╡Жр┤│р╡Нр┤│р┤В р┤ир┤┐р┤▒р┤Юр╡Нр┤Ю р┤╡р┤пр┤▓р╡Бр┤Хр┤│р┤┐р╡╜ р┤ир┤ир╡Нр┤ир┤╛р┤пр┤┐ р┤╡р┤│р┤░р╡Бр┤В. 4-6 р┤ор┤╛р┤╕р┤др╡Нр┤др╡Ж р┤╡р┤│р╡╝р┤Ър╡Нр┤Ър┤╛р┤Хр┤╛р┤▓р┤В р┤Жр┤╡р┤╢р╡Нр┤пр┤Вред",
            "hi": "рдЪрд╛рд╡рд▓ рдПрдХ рдореБрдЦреНрдп рдЕрдирд╛рдЬ рдХреА рдлрд╕рд▓ рд╣реИред рдмрд╛рдврд╝ рд╡рд╛рд▓реЗ рдЦреЗрддреЛрдВ рдореЗрдВ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреА рддрд░рд╣ рдЙрдЧрддрд╛ рд╣реИред 4-6 рдорд╣реАрдиреЗ рдХреА рдмрдврд╝рдиреЗ рдХреА рдЕрд╡рдзрд┐ рдЪрд╛рд╣рд┐рдПред"
        },
        "wheat": {
            "en": "Wheat is a major cereal grain. Grows best in temperate climates. Sow in October-November. Harvest in March-April. Requires well-drained soil.",
            "ta": "роХрпЛродрпБроорпИ роТро░рпБ роорпБроХрпНроХро┐роп родро╛ройро┐роп рокропро┐ро░рпН. рооро┐родрооро╛рой роХро╛ро▓роиро┐ро▓рпИропро┐ро▓рпН роЪро┐ро▒рокрпНрокро╛роХ ро╡ро│ро░рпБроорпН. роЕроХрпНроЯрпЛрокро░рпН-роиро╡роорпНрокро░ро┐ро▓рпН ро╡ро┐родрпИроХрпНроХро╡рпБроорпНред",
            "te": "р░Чр▒Лр░зр▒Бр░о р░кр▒Нр░░р░зр░╛р░и р░зр░╛р░ир▒Нр░п р░кр░Вр░Я. р░╕р░ор░╢р▒Ар░др▒Лр░╖р▒Нр░г р░╡р░╛р░др░╛р░╡р░░р░гр░Вр░▓р▒Л р░мр░╛р░Чр░╛ р░кр▒Жр░░р▒Бр░Чр▒Бр░др▒Бр░Вр░жр░┐ред",
            "ml": "р┤Чр╡Лр┤др┤ор╡Нр┤кр╡Н р┤Тр┤░р╡Б р┤кр╡Нр┤░р┤зр┤╛р┤и р┤зр┤╛р┤ир╡Нр┤п р┤╡р┤┐р┤│. р┤ор┤┐р┤др┤╢р╡Ар┤др╡Лр┤╖р╡Нр┤г р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤пр┤┐р╡╜ р┤ир┤ир╡Нр┤ир┤╛р┤пр┤┐ р┤╡р┤│р┤░р╡Бр┤Вред",
            "hi": "рдЧреЗрд╣реВрдВ рдПрдХ рдореБрдЦреНрдп рдЕрдирд╛рдЬ рд╣реИред рд╕рдорд╢реАрддреЛрд╖реНрдг рдЬрд▓рд╡рд╛рдпреБ рдореЗрдВ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреА рддрд░рд╣ рдЙрдЧрддрд╛ рд╣реИред"
        },
        "corn": {
            "en": "Corn/Maize is a versatile cereal crop. Requires warm climate and well-drained soil. Plant after last frost. Harvest when kernels are milky. Used for food, feed, and industrial purposes.",
            "ta": "роЪрпЛро│роорпН роТро░рпБ рокро▓рпНроирпЛроХрпНроХрпБ родро╛ройро┐роп рокропро┐ро░рпН. ро╡рпЖрокрпНрокрооро╛рой роХро╛ро▓роиро┐ро▓рпИ рооро▒рпНро▒рпБроорпН роиро▓рпНро▓ ро╡роЯро┐роХро╛ро▓рпН роорогрпН родрпЗро╡рпИред",
            "te": "р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и р░мр░╣р▒Бр░│ р░Йр░кр░пр▒Лр░Ч р░зр░╛р░ир▒Нр░п р░кр░Вр░Я. р░╡р▒Жр░Ър▒Нр░Ър░ир░┐ р░╡р░╛р░др░╛р░╡р░░р░гр░В р░ор░░р░┐р░пр▒Б р░ор░Вр░Ър░┐ р░бр▒Нр░░р▒Ир░ир▒Зр░Ьр▒Н р░Ер░╡р░╕р░░р░Вред",
            "ml": "р┤Ър╡Лр┤│р┤В р┤Тр┤░р╡Б р┤мр┤╣р╡Бр┤ор╡Бр┤Ц р┤зр┤╛р┤ир╡Нр┤п р┤╡р┤┐р┤│. р┤Ър╡Вр┤Яр╡Бр┤│р╡Нр┤│ р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤пр╡Бр┤В р┤ир┤▓р╡Нр┤▓ р┤бр╡Нр┤░р╡Жр┤пр┤┐р┤ир╡Зр┤Ьр╡Бр┤В р┤Жр┤╡р┤╢р╡Нр┤пр┤Вред",
            "hi": "рдордХреНрдХрд╛ рдПрдХ рдмрд╣реБрдЙрдкрдпреЛрдЧреА рдЕрдирд╛рдЬ рдХреА рдлрд╕рд▓ рд╣реИред рдЧрд░реНрдо рдЬрд▓рд╡рд╛рдпреБ рдФрд░ рдЕрдЪреНрдЫреА рдЬрд▓ рдирд┐рдХрд╛рд╕реА рдЪрд╛рд╣рд┐рдПред"
        },
        "barley": {
            "en": "Barley is a hardy cereal grain. Tolerates cool, dry conditions. Plant in fall or spring. Used for brewing, animal feed, and food.",
            "ta": "рокро╛ро░рпНро▓ро┐ роТро░рпБ роХроЯро┐ройрооро╛рой родро╛ройро┐роп рокропро┐ро░рпН. роХрпБро│ро┐ро░рпН, ро╡ро▒рогрпНроЯ роиро┐ро▓рпИроорпИроХро│рпИ родро╛роЩрпНроХрпБроорпНред",
            "te": "р░мр░╛р░░р▒Нр░▓р▒А р░жр▒Гр░вр░ор▒Ир░и р░зр░╛р░ир▒Нр░п р░кр░Вр░Я. р░Ър░▓р▒Нр░▓р░ир░┐, р░кр▒Кр░бр░┐ р░кр░░р░┐р░╕р▒Нр░ер░┐р░др▒Бр░▓р░ир▒Б р░др░Яр▒Нр░Яр▒Бр░Хр▒Лр░Чр░▓р░жр▒Бред",
            "ml": "р┤мр┤╛р╡╝р┤▓р┤┐ р┤Хр┤╛р┤ар┤┐р┤ир╡Нр┤пр┤ор╡Бр┤│р╡Нр┤│ р┤зр┤╛р┤ир╡Нр┤п р┤╡р┤┐р┤│. р┤др┤гр╡Бр┤др╡Нр┤д, р┤╡р┤░р┤гр╡Нр┤Я р┤Ер┤╡р┤╕р╡Нр┤ер┤Хр╡╛ р┤╕р┤╣р┤┐р┤Хр╡Нр┤Хр╡Бр┤Вред",
            "hi": "рдЬреМ рдПрдХ рдХрдареЛрд░ рдЕрдирд╛рдЬ рд╣реИред рдардВрдбреА, рд╕реВрдЦреА рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпреЛрдВ рдХреЛ рд╕рд╣рди рдХрд░рддрд╛ рд╣реИред"
        },
        "oats": {
            "en": "Oats are cool-season cereal grain. Prefer cooler climates. Plant in early spring or fall. Good for human consumption and animal feed.",
            "ta": "роУроЯрпНро╕рпН роХрпБро│ро┐ро░рпНроХро╛ро▓ родро╛ройро┐роп рокропро┐ро░рпН. роХрпБро│ро┐ро░рпНроирпНрод роХро╛ро▓роиро┐ро▓рпИропрпИ ро╡ро┐ро░рпБроорпНрокрпБроорпНред",
            "te": "р░╡р▒Лр░Яр▒Нр░╕р▒Н р░Ър░▓р▒Нр░▓р░ир░┐ р░Хр░╛р░▓р░В р░зр░╛р░ир▒Нр░п р░кр░Вр░Я. р░Ър░▓р▒Нр░▓р░ир░┐ р░╡р░╛р░др░╛р░╡р░░р░гр░╛р░ир▒Нр░ир░┐ р░Зр░╖р▒Нр░Яр░кр░бр▒Бр░др▒Бр░Вр░жр░┐ред",
            "ml": "р┤Ур┤Яр╡Нр┤╕р╡Н р┤др┤гр╡Бр┤др╡Нр┤д р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤пр┤┐р┤▓р╡Ж р┤зр┤╛р┤ир╡Нр┤п р┤╡р┤┐р┤│. р┤др┤гр╡Бр┤др╡Нр┤д р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е р┤Зр┤╖р╡Нр┤Яр┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤ир╡Нр┤ир╡Бред",
            "hi": "рдЬрдИ рдардВрдбреЗ рдореМрд╕рдо рдХрд╛ рдЕрдирд╛рдЬ рд╣реИред рдардВрдбреА рдЬрд▓рд╡рд╛рдпреБ рдкрд╕рдВрдж рдХрд░рддрд╛ рд╣реИред"
        },
        # Legumes/Pulses
        "soybeans": {
            "en": "Soybeans are protein-rich legumes. Require warm growing season. Plant after soil warms. Fix nitrogen in soil. Harvest when pods rattle.",
            "ta": "роЪрпЛропро╛рокрпАройрпН рокрпБро░родроорпН роиро┐ро▒рпИроирпНрод рокро░рпБрокрпНрокрпБ ро╡роХрпИред ро╡рпЖрокрпНрокрооро╛рой ро╡ро│ро░рпНроЪрпНроЪро┐ роХро╛ро▓роорпН родрпЗро╡рпИред",
            "te": "р░╕р▒Лр░пр░╛р░мр▒Ар░ир▒Нр░╕р▒Н р░кр▒Нр░░р▒Лр░Яр▒Ар░ир▒Н р░Ер░зр░┐р░Хр░Вр░Чр░╛ р░Йр░Вр░бр▒З р░Чр░┐р░Вр░Ьр░▓р▒Б. р░╡р▒Жр░Ър▒Нр░Ър░ир░┐ р░кр▒Жр░░р▒Бр░Чр▒Бр░жр░▓ р░Хр░╛р░▓р░В р░Ер░╡р░╕р░░р░Вред",
            "ml": "р┤╕р╡Лр┤пр┤╛р┤мр╡Ар╡╗ р┤кр╡Нр┤░р╡Лр┤Яр╡Нр┤Яр╡Ар╡╗ р┤╕р┤ор╡Нр┤кр╡Бр┤╖р╡Нр┤Яр┤ор┤╛р┤п р┤кр┤пр╡╝р┤╡р╡╝р┤Чр╡Нр┤Чр┤В. р┤Ър╡Вр┤Яр╡Бр┤│р╡Нр┤│ р┤╡р┤│р╡╝р┤Ър╡Нр┤Ър┤╛ р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е р┤Жр┤╡р┤╢р╡Нр┤пр┤Вред",
            "hi": "рд╕реЛрдпрд╛рдмреАрди рдкреНрд░реЛрдЯреАрди рдпреБрдХреНрдд рджрд▓рд╣рди рд╣реИред рдЧрд░реНрдо рдмрдврд╝рдиреЗ рдХрд╛ рдореМрд╕рдо рдЪрд╛рд╣рд┐рдПред"
        },
        "chickpeas": {
            "en": "Chickpeas are drought-tolerant legumes. Prefer cool, dry conditions. Plant in winter/spring. Fix nitrogen. Good protein source.",
            "ta": "роХрпКрогрпНроЯрпИроХрпНроХроЯро▓рпИ ро╡ро▒роЯрпНроЪро┐ропрпИ родро╛роЩрпНроХрпБроорпН рокро░рпБрокрпНрокрпБ ро╡роХрпИред роХрпБро│ро┐ро░рпН, ро╡ро▒рогрпНроЯ роиро┐ро▓рпИроорпИроХро│рпИ ро╡ро┐ро░рпБроорпНрокрпБроорпНред",
            "te": "р░╢р░ир░Чр░▓р▒Б р░Хр░░р▒Бр░╡р▒Б р░др░Яр▒Нр░Яр▒Бр░Хр▒Бр░ир▒З р░Чр░┐р░Вр░Ьр░▓р▒Б. р░Ър░▓р▒Нр░▓р░ир░┐, р░кр▒Кр░бр░┐ р░кр░░р░┐р░╕р▒Нр░ер░┐р░др▒Бр░▓р░ир▒Б р░Зр░╖р▒Нр░Яр░кр░бр░др░╛р░пр░┐ред",
            "ml": "р┤Ър╡Жр┤▒р╡Бр┤кр┤пр╡╝ р┤╡р┤░р╡╛р┤Ър╡Нр┤Ъ р┤╕р┤╣р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤и р┤кр┤пр╡╝р┤╡р╡╝р┤Чр╡Нр┤Чр┤В. р┤др┤гр╡Бр┤др╡Нр┤д, р┤╡р┤░р┤гр╡Нр┤Я р┤Ер┤╡р┤╕р╡Нр┤ер┤Хр╡╛ р┤Зр┤╖р╡Нр┤Яр┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤ир╡Нр┤ир╡Бред",
            "hi": "рдЪрдирд╛ рд╕реВрдЦрд╛ рд╕рд╣рдиреЗ рд╡рд╛рд▓реА рджрд╛рд▓ рд╣реИред рдардВрдбреА, рд╕реВрдЦреА рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпрд╛рдВ рдкрд╕рдВрдж рдХрд░рддрд╛ рд╣реИред"
        },
        "lentils": {
            "en": "Lentils are cool-season legumes. Tolerate frost. Plant in fall or early spring. Quick-growing protein crop. Various colors available.",
            "ta": "рокро░рпБрокрпНрокрпБ роХрпБро│ро┐ро░рпНроХро╛ро▓ рокро░рпБрокрпНрокрпБ ро╡роХрпИред роЙро▒рпИрокройро┐ропрпИ родро╛роЩрпНроХрпБроорпН. роЗро▓рпИропрпБродро┐ро░рпН роЕро▓рпНро▓родрпБ ро╡роЪроирпНрод роХро╛ро▓родрпНродро┐ро▓рпН роироЯро╡рпБред",
            "te": "р░ор░╕р▒Вр░░р▒Н р░Ър░▓р▒Нр░▓р░ир░┐ р░Хр░╛р░▓р░В р░Чр░┐р░Вр░Ьр░▓р▒Б. р░ор░Вр░Ър▒Бр░ир▒Б р░др░Яр▒Нр░Яр▒Бр░Хр▒Бр░Вр░Яр░╛р░пр░┐ред",
            "ml": "р┤кр┤пр╡╝ р┤др┤гр╡Бр┤др╡Нр┤д р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤пр┤┐р┤▓р╡Ж р┤кр┤пр╡╝р┤╡р╡╝р┤Чр╡Нр┤Чр┤В. р┤др╡Бр┤╖р┤╛р┤░р┤В р┤╕р┤╣р┤┐р┤Хр╡Нр┤Хр╡Бр┤Вред",
            "hi": "рдорд╕реВрд░ рдардВрдбреЗ рдореМрд╕рдо рдХреА рджрд╛рд▓ рд╣реИред рдкрд╛рд▓рд╛ рд╕рд╣рди рдХрд░рддреА рд╣реИред"
        },
        # Vegetables
        "tomatoes": {
            "en": "Tomatoes are warm-season vegetables. Need support structures. Require consistent watering. Harvest when fully colored but firm.",
            "ta": "родроХрпНроХро╛ро│ро┐ ро╡рпЖрокрпНрокроХро╛ро▓ роХро╛ропрпНроХро▒ро┐ред роЖродро╛ро░ роХроЯрпНроЯроорпИрокрпНрокрпБ родрпЗро╡рпИред роиро┐ро▓рпИропро╛рой роирпАро░рпНрокрпНрокро╛роЪройроорпН родрпЗро╡рпИред",
            "te": "р░Яр░ор▒Лр░Яр░╛р░▓р▒Б р░╡р▒Зр░╕р░╡р░┐ р░Хр░╛р░▓р░кр▒Б р░Хр▒Вр░░р░Чр░╛р░пр░▓р▒Б. р░ор░жр▒Нр░жр░др▒Б р░ир░┐р░░р▒Нр░ор░╛р░гр░╛р░▓р▒Б р░Ер░╡р░╕р░░р░Вред",
            "ml": "р┤др┤Хр╡Нр┤Хр┤╛р┤│р┤┐ р┤╡р╡Зр┤ир╡╜р┤Хр╡Нр┤Хр┤╛р┤▓ р┤кр┤Ър╡Нр┤Ър┤Хр╡Нр┤Хр┤▒р┤┐. р┤кр┤┐р┤ир╡Нр┤др╡Бр┤г р┤Шр┤Яр┤ир┤Хр╡╛ р┤Жр┤╡р┤╢р╡Нр┤пр┤Вред",
            "hi": "рдЯрдорд╛рдЯрд░ рдЧрд░реНрдо рдореМрд╕рдо рдХреА рд╕рдмреНрдЬреА рд╣реИред рд╕рд╣рд╛рд░реЗ рдХреА рд╕рдВрд░рдЪрдирд╛ рдЪрд╛рд╣рд┐рдПред"
        },
        "potatoes": {
            "en": "Potatoes are cool-season tubers. Plant in early spring. Hill soil around plants. Harvest when tops die back. Store in cool, dark place.",
            "ta": "роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ роХрпБро│ро┐ро░рпНроХро╛ро▓ роХро┐ро┤роЩрпНроХрпБ ро╡роХрпИред ро╡роЪроирпНрод роХро╛ро▓родрпНродро┐ройрпН роЖро░роорпНрокродрпНродро┐ро▓рпН роироЯро╡рпБ роЪрпЖропрпНропро╡рпБроорпНред",
            "te": "р░мр░Вр░Чр░╛р░│р░╛р░жр▒Бр░Вр░кр░▓р▒Б р░Ър░▓р▒Нр░▓р░ир░┐ р░Хр░╛р░▓р░В р░Чр░бр▒Нр░бр░Хр░Вр░ж. р░╡р░╕р░Вр░д р░Лр░др▒Бр░╡р▒Б р░кр▒Нр░░р░╛р░░р░Вр░нр░Вр░▓р▒Л р░ир░╛р░Яр░╛р░▓р░┐ред",
            "ml": "р┤Йр┤░р╡Бр┤│р┤Хр╡Нр┤Хр┤┐р┤┤р┤Щр╡Нр┤Щр╡Н р┤др┤гр╡Бр┤др╡Нр┤д р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤пр┤┐р┤▓р╡Ж р┤Хр┤┐р┤┤р┤Щр╡Нр┤Щр╡Н. р┤╡р┤╕р┤ир╡Нр┤др┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤др╡Бр┤Яр┤Хр╡Нр┤Хр┤др╡Нр┤др┤┐р╡╜ р┤ир┤Яр╡Бр┤Хред",
            "hi": "рдЖрд▓реВ рдардВрдбреЗ рдореМрд╕рдо рдХрд╛ рдХрдВрдж рд╣реИред рд╡рд╕рдВрдд рдХреА рд╢реБрд░реБрдЖрдд рдореЗрдВ рд▓рдЧрд╛рдПрдВред"
        },
        "onions": {
            "en": "Onions are biennial bulbs grown as annuals. Prefer cool weather for growth, warm weather for bulbing. Long day vs short day varieties.",
            "ta": "ро╡рпЖроЩрпНроХро╛ропроорпН роЗро░рпБ роЖрогрпНроЯрпБ рокропро┐ро░ро╛роХ ро╡ро│ро░рпНроХрпНроХрокрпНрокроЯрпБроорпН роЖрогрпНроЯрпБ рокропро┐ро░рпН. ро╡ро│ро░рпНроЪрпНроЪро┐роХрпНроХрпБ роХрпБро│ро┐ро░рпН роХро╛ро▓роиро┐ро▓рпИропрпИ ро╡ро┐ро░рпБроорпНрокрпБроорпНред",
            "te": "р░Йр░▓р▒Нр░▓р░┐р░кр░╛р░пр░▓р▒Б р░░р▒Жр░Вр░бр▒Зр░│р▒Нр░▓ р░мр░▓р▒Нр░мр▒Бр░▓р▒Б р░╡р░╛р░░р▒Нр░╖р░┐р░Х р░кр░Вр░Яр░▓р▒Бр░Чр░╛ р░кр▒Жр░░р▒Бр░Чр▒Бр░др░╛р░пр░┐ред р░кр▒Жр░░р▒Бр░Чр▒Бр░жр░▓р░Хр▒Б р░Ър░▓р▒Нр░▓р░ир░┐ р░╡р░╛р░др░╛р░╡р░░р░гр░В р░Хр░╛р░╡р░╛р░▓р░┐ред",
            "ml": "р┤Йр┤│р╡Нр┤│р┤┐ р┤╡р┤╛р╡╝р┤╖р┤┐р┤Х р┤╡р┤┐р┤│р┤пр┤╛р┤пр┤┐ р┤╡р┤│р╡╝р┤др╡Нр┤др╡Бр┤ир╡Нр┤и р┤жр╡Нр┤╡р┤┐р┤╡р┤╛р╡╝р┤╖р┤┐р┤Х р┤мр╡╛р┤мр╡Бр┤Хр╡╛. р┤╡р┤│р╡╝р┤Ър╡Нр┤Ър┤пр╡Нр┤Хр╡Нр┤Хр╡Н р┤др┤гр╡Бр┤др╡Нр┤д р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е р┤Зр┤╖р╡Нр┤Яр┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤ир╡Нр┤ир╡Бред",
            "hi": "рдкреНрдпрд╛рдЬ рджреНрд╡рд┐рд╡рд╛рд░реНрд╖рд┐рдХ рдмрд▓реНрдм рд╣реИрдВ рдЬреЛ рд╡рд╛рд░реНрд╖рд┐рдХ рдлрд╕рд▓ рдХреЗ рд░реВрдк рдореЗрдВ рдЙрдЧрд╛рдП рдЬрд╛рддреЗ рд╣реИрдВред"
        },
        "carrots": {
            "en": "Carrots are cool-season root vegetables. Need loose, deep soil. Direct seed in garden. Thin seedlings. Harvest when roots reach desired size.",
            "ta": "роХрпЗро░роЯрпН роХрпБро│ро┐ро░рпНроХро╛ро▓ ро╡рпЗро░рпН роХро╛ропрпНроХро▒ро┐ред родро│ро░рпНро╡ро╛рой, роЖро┤рооро╛рой роорогрпН родрпЗро╡рпИред родрпЛроЯрпНроЯродрпНродро┐ро▓рпН роирпЗро░роЯро┐ ро╡ро┐родрпИред",
            "te": "р░Хр▒Нр░пр░╛р░░р▒Жр░Яр▒Нр░▓р▒Б р░Ър░▓р▒Нр░▓р░ир░┐ р░Хр░╛р░▓р░кр▒Б р░╡р▒Зр░░р▒Б р░Хр▒Вр░░р░Чр░╛р░пр░▓р▒Б. р░╡р░жр▒Бр░▓р▒Бр░Чр░╛, р░▓р▒Лр░др▒Ир░и р░ор░Яр▒Нр░Яр░┐ р░Ер░╡р░╕р░░р░Вред",
            "ml": "р┤Хр┤╛р┤░р┤▒р╡Нр┤▒р╡Н р┤др┤гр╡Бр┤др╡Нр┤д р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤пр┤┐р┤▓р╡Ж р┤╡р╡Зр┤░р╡Н р┤кр┤Ър╡Нр┤Ър┤Хр╡Нр┤Хр┤▒р┤┐. р┤Ер┤пр┤Юр╡Нр┤Юр┤др╡Бр┤В р┤Жр┤┤р┤ор╡Бр┤│р╡Нр┤│р┤др╡Бр┤ор┤╛р┤п р┤ор┤гр╡Нр┤гр╡Н р┤Жр┤╡р┤╢р╡Нр┤пр┤Вред",
            "hi": "рдЧрд╛рдЬрд░ рдардВрдбреЗ рдореМрд╕рдо рдХреА рдЬрдбрд╝ рд╕рдмреНрдЬреА рд╣реИред рдвреАрд▓реА, рдЧрд╣рд░реА рдорд┐рдЯреНрдЯреА рдЪрд╛рд╣рд┐рдПред"
        },
        # Fruits
        "apples": {
            "en": "Apples are temperate fruit trees. Require chill hours in winter. Plant in spring. Need cross-pollination. Harvest in fall when ripe.",
            "ta": "роЖрокрпНрокро┐ро│рпН рооро┐родрооро╛рой рокро┤ рооро░роЩрпНроХро│рпН. роХрпБро│ро┐ро░рпНроХро╛ро▓родрпНродро┐ро▓рпН роХрпБро│ро┐ро░рпН роорогро┐ роирпЗро░роорпН родрпЗро╡рпИред ро╡роЪроирпНрод роХро╛ро▓родрпНродро┐ро▓рпН роироЯро╡рпБред",
            "te": "р░Жр░кр░┐р░▓р▒Нр░╕р▒Н р░╕р░ор░╢р▒Ар░др▒Лр░╖р▒Нр░г р░кр░Вр░бр▒Нр░▓ р░Ър▒Жр░Яр▒Нр░▓р▒Б. р░╢р▒Ар░др░╛р░Хр░╛р░▓р░Вр░▓р▒Л р░Ър░▓р▒Нр░▓р░ир░┐ р░Чр░Вр░Яр░▓р▒Б р░Ер░╡р░╕р░░р░Вред",
            "ml": "р┤Жр┤кр╡Нр┤кр┤┐р╡╛ р┤ор┤┐р┤др┤╢р╡Ар┤др╡Лр┤╖р╡Нр┤г р┤лр┤▓р┤╡р╡Гр┤Хр╡Нр┤╖р┤Щр╡Нр┤Щр╡╛. р┤╢р╡Ар┤др┤Хр┤╛р┤▓р┤др╡Нр┤др╡Н р┤др┤гр╡Бр┤др╡Нр┤д р┤ор┤гр┤┐р┤Хр╡Нр┤Хр╡Вр┤▒р╡Бр┤Хр╡╛ р┤Жр┤╡р┤╢р╡Нр┤пр┤Вред",
            "hi": "рд╕реЗрдм рд╕рдорд╢реАрддреЛрд╖реНрдг рдлрд▓реЛрдВ рдХреЗ рдкреЗрдбрд╝ рд╣реИрдВред рд╕рд░реНрджреА рдореЗрдВ рдардВрдбреЗ рдШрдВрдЯреЗ рдЪрд╛рд╣рд┐рдПред"
        },
        "oranges": {
            "en": "Oranges are citrus fruits. Need warm, frost-free climate. Regular watering required. Harvest when fully colored and sweet.",
            "ta": "роЖро░роЮрпНроЪрпБ роЪро┐роЯрпНро░ро╕рпН рокро┤роЩрпНроХро│рпН. ро╡рпЖрокрпНрокрооро╛рой, роЙро▒рпИрокройро┐ роЗро▓рпНро▓ро╛род роХро╛ро▓роиро┐ро▓рпИ родрпЗро╡рпИред",
            "te": "р░ир░╛р░░р░┐р░Вр░Ьр░▓р▒Б р░╕р░┐р░Яр▒Нр░░р░╕р▒Н р░кр░Вр░бр▒Нр░▓р▒Б. р░╡р▒Жр░Ър▒Нр░Ър░ир░┐, р░ор░Вр░Ър▒Б р░▓р▒Зр░ир░┐ р░╡р░╛р░др░╛р░╡р░░р░гр░В р░Ер░╡р░╕р░░р░Вред",
            "ml": "р┤Ур┤▒р┤Юр╡Нр┤Ър╡Н р┤╕р┤┐р┤Яр╡Нр┤░р┤╕р╡Н р┤лр┤▓р┤Щр╡Нр┤Щр╡╛. р┤Ър╡Вр┤Яр╡Бр┤│р╡Нр┤│р┤др╡Бр┤В р┤др╡Бр┤╖р┤╛р┤░р┤░р┤╣р┤┐р┤др┤╡р╡Бр┤ор┤╛р┤п р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е р┤Жр┤╡р┤╢р╡Нр┤пр┤Вред",
            "hi": "рд╕рдВрддрд░реЗ рдЦрдЯреНрдЯреЗ рдлрд▓ рд╣реИрдВред рдЧрд░реНрдо, рдкрд╛рд▓рд╛ рд░рд╣рд┐рдд рдЬрд▓рд╡рд╛рдпреБ рдЪрд╛рд╣рд┐рдПред"
        },
        "bananas": {
            "en": "Bananas are tropical fruits. Need hot, humid climate. Require rich, well-drained soil. Harvest bunches when plump but green.",
            "ta": "ро╡ро╛ро┤рпИрокрпНрокро┤роорпН ро╡рпЖрокрпНрокроорогрпНроЯро▓ рокро┤роЩрпНроХро│рпН. ро╡рпЖрокрпНрокрооро╛рой, роИро░рокрпНрокродрооро╛рой роХро╛ро▓роиро┐ро▓рпИ родрпЗро╡рпИред",
            "te": "р░Ер░░р░Яр░┐р░кр░Вр░бр▒Нр░▓р▒Б р░Йр░╖р▒Нр░гр░ор░Вр░бр░▓ р░кр░Вр░бр▒Нр░▓р▒Б. р░╡р▒Зр░бр░┐р░ор░┐р░Чр░┐р░▓р░┐р░и, р░др▒Зр░ор░др▒Л р░Хр▒Вр░бр░┐р░и р░╡р░╛р░др░╛р░╡р░░р░гр░В р░Ер░╡р░╕р░░р░Вред",
            "ml": "р┤╡р┤╛р┤┤р┤кр╡Нр┤кр┤┤р┤В р┤Йр┤╖р╡Нр┤гр┤ор╡Зр┤Цр┤▓р┤╛ р┤лр┤▓р┤Щр╡Нр┤Щр╡╛. р┤Ър╡Вр┤Яр╡Бр┤│р╡Нр┤│р┤др╡Бр┤В р┤Ир╡╝р┤кр╡Нр┤кр┤ор╡Бр┤│р╡Нр┤│р┤др╡Бр┤ор┤╛р┤п р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е р┤Жр┤╡р┤╢р╡Нр┤пр┤Вред",
            "hi": "рдХреЗрд▓реЗ рдЙрд╖реНрдгрдХрдЯрд┐рдмрдВрдзреАрдп рдлрд▓ рд╣реИрдВред рдЧрд░реНрдо, рдирдо рдЬрд▓рд╡рд╛рдпреБ рдЪрд╛рд╣рд┐рдПред"
        },
        "grapes": {
            "en": "Grapes are perennial vines. Need warm, dry growing season. Require trellising support. Harvest when sugar content is optimal.",
            "ta": "родро┐ро░ро╛роЯрпНроЪрпИ рокро▓ роЖрогрпНроЯрпБ роХрпКроЯро┐роХро│рпН. ро╡рпЖрокрпНрокрооро╛рой, ро╡ро▒рогрпНроЯ ро╡ро│ро░рпНроЪрпНроЪро┐ роХро╛ро▓роорпН родрпЗро╡рпИред",
            "te": "р░жр▒Нр░░р░╛р░Хр▒Нр░╖р░▓р▒Б р░мр░╣р▒Бр░Пр░│р▒Нр░▓ р░др▒Ар░Чр░▓р▒Б. р░╡р▒Жр░Ър▒Нр░Ър░ир░┐, р░кр▒Кр░бр░┐ р░кр▒Жр░░р▒Бр░Чр▒Бр░жр░▓ р░Хр░╛р░▓р░В р░Ер░╡р░╕р░░р░Вред",
            "ml": "р┤ор╡Бр┤ир╡Нр┤др┤┐р┤░р┤┐ р┤мр┤╣р╡Бр┤╡р┤╛р╡╝р┤╖р┤┐р┤Х р┤╡р┤│р╡Нр┤│р┤┐р┤Хр╡╛. р┤Ър╡Вр┤Яр╡Бр┤│р╡Нр┤│р┤др╡Бр┤В р┤╡р┤░р┤гр╡Нр┤Яр┤др╡Бр┤ор┤╛р┤п р┤╡р┤│р╡╝р┤Ър╡Нр┤Ър┤╛ р┤Хр┤╛р┤▓р┤В р┤Жр┤╡р┤╢р╡Нр┤пр┤Вред",
            "hi": "рдЕрдВрдЧреВрд░ рдмрд╛рд░рд╣рдорд╛рд╕реА рдмреЗрд▓ рд╣реИрдВред рдЧрд░реНрдо, рд╕реВрдЦрд╛ рдмрдврд╝рдиреЗ рдХрд╛ рдореМрд╕рдо рдЪрд╛рд╣рд┐рдПред"
        },
        # Cash Crops
        "cotton": {
            "en": "Cotton is a warm-season fiber crop. Requires long, hot growing season. Deep, well-drained soil needed. Harvest when bolls open.",
            "ta": "рокро░рпБродрпНродро┐ ро╡рпЖрокрпНрокроХро╛ро▓ роиро╛ро░рпН рокропро┐ро░рпН. роирпАрогрпНроЯ, ро╡рпЖрокрпНрокрооро╛рой ро╡ро│ро░рпНроЪрпНроЪро┐ роХро╛ро▓роорпН родрпЗро╡рпИред",
            "te": "р░кр░др▒Нр░др░┐ р░╡р▒Зр░╕р░╡р░┐ р░Хр░╛р░▓р░кр▒Б р░ир░╛р░░р▒Б р░кр░Вр░Я. р░╕р▒Бр░жр▒Ар░░р▒Нр░Шр░ор▒Ир░и, р░╡р▒Зр░бр░┐р░ор░┐р░Чр░┐р░▓р░┐р░и р░кр▒Жр░░р▒Бр░Чр▒Бр░жр░▓ р░Хр░╛р░▓р░В р░Ер░╡р░╕р░░р░Вред",
            "ml": "р┤кр┤░р╡Бр┤др╡Нр┤др┤┐ р┤╡р╡Зр┤ир╡╜р┤Хр╡Нр┤Хр┤╛р┤▓ р┤ир┤╛р┤░р╡Н р┤╡р┤┐р┤│. р┤жр╡Ар╡╝р┤Шр┤╡р╡Бр┤В р┤Ър╡Вр┤Яр╡Бр┤│р╡Нр┤│р┤др╡Бр┤ор┤╛р┤п р┤╡р┤│р╡╝р┤Ър╡Нр┤Ър┤╛ р┤Хр┤╛р┤▓р┤В р┤Жр┤╡р┤╢р╡Нр┤пр┤Вред",
            "hi": "рдХрдкрд╛рд╕ рдЧрд░реНрдо рдореМрд╕рдо рдХреА рд░реЗрд╢рд╛ рдлрд╕рд▓ рд╣реИред рд▓рдВрдмрд╛, рдЧрд░реНрдо рдмрдврд╝рдиреЗ рдХрд╛ рдореМрд╕рдо рдЪрд╛рд╣рд┐рдПред"
        },
        "sugarcane": {
            "en": "Sugarcane is a tropical cash crop. Requires hot, humid climate. 12-18 month crop cycle. Needs abundant water. Harvest when stalks are mature.",
            "ta": "роХро░рпБроорпНрокрпБ ро╡рпЖрокрпНрокроорогрпНроЯро▓ рокрогрокрпН рокропро┐ро░рпН. ро╡рпЖрокрпНрокрооро╛рой, роИро░рокрпНрокродрооро╛рой роХро╛ро▓роиро┐ро▓рпИ родрпЗро╡рпИред",
            "te": "р░Ър▒Жр░░р░Хр▒Б р░Йр░╖р▒Нр░гр░ор░Вр░бр░▓ р░╡р░╛р░гр░┐р░Ьр▒Нр░п р░кр░Вр░Я. р░╡р▒Зр░бр░┐р░ор░┐р░Чр░┐р░▓р░┐р░и, р░др▒Зр░ор░др▒Л р░Хр▒Вр░бр░┐р░и р░╡р░╛р░др░╛р░╡р░░р░гр░В р░Ер░╡р░╕р░░р░Вред",
            "ml": "р┤Хр┤░р┤┐р┤ор╡Нр┤кр╡Н р┤Йр┤╖р╡Нр┤гр┤ор╡Зр┤Цр┤▓р┤╛ р┤╡р┤╛р┤гр┤┐р┤Ьр╡Нр┤п р┤╡р┤┐р┤│. р┤Ър╡Вр┤Яр╡Бр┤│р╡Нр┤│р┤др╡Бр┤В р┤Ир╡╝р┤кр╡Нр┤кр┤ор╡Бр┤│р╡Нр┤│р┤др╡Бр┤ор┤╛р┤п р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е р┤Жр┤╡р┤╢р╡Нр┤пр┤Вред",
            "hi": "рдЧрдиреНрдирд╛ рдЙрд╖реНрдгрдХрдЯрд┐рдмрдВрдзреАрдп рдирдХрджреА рдлрд╕рд▓ рд╣реИред рдЧрд░реНрдо, рдирдо рдЬрд▓рд╡рд╛рдпреБ рдЪрд╛рд╣рд┐рдПред"
        },
        "coffee": {
            "en": "Coffee is a tropical perennial shrub. Needs high altitude, consistent rainfall. Shade-grown preferred. Harvest cherries when ripe.",
            "ta": "роХро╛рокро┐ ро╡рпЖрокрпНрокроорогрпНроЯро▓ рокро▓ роЖрогрпНроЯрпБ рокрпБродро░рпН. роЙропро░рпН рокроХрпБродро┐, роиро┐ро▓рпИропро╛рой рооро┤рпИ родрпЗро╡рпИред",
            "te": "р░Хр░╛р░лр▒А р░Йр░╖р▒Нр░гр░ор░Вр░бр░▓ р░мр░╣р▒Бр░Пр░│р▒Нр░▓ р░кр▒Кр░ж. р░Ор░др▒Нр░др▒Ир░и р░кр▒Нр░░р░╛р░Вр░др░В, р░╕р▒Нр░ер░┐р░░р░ор▒Ир░и р░╡р░░р▒Нр░╖р░кр░╛р░др░В р░Ер░╡р░╕р░░р░Вред",
            "ml": "р┤Хр┤╛р┤кр╡Нр┤кр┤┐ р┤Йр┤╖р╡Нр┤гр┤ор╡Зр┤Цр┤▓р┤╛ р┤мр┤╣р╡Бр┤╡р┤╛р╡╝р┤╖р┤┐р┤Х р┤Хр╡Бр┤▒р╡Нр┤▒р┤┐р┤Ър╡Нр┤Ър╡Жр┤Яр┤┐. р┤Йр┤пр╡╝р┤ир╡Нр┤и р┤кр╡Нр┤░р┤жр╡Зр┤╢р┤В, р┤╕р╡Нр┤ер┤┐р┤░р┤ор┤╛р┤п р┤ор┤┤ р┤Жр┤╡р┤╢р╡Нр┤пр┤Вред",
            "hi": "рдХреЙрдлреА рдЙрд╖реНрдгрдХрдЯрд┐рдмрдВрдзреАрдп рдмрд╛рд░рд╣рдорд╛рд╕реА рдЭрд╛рдбрд╝реА рд╣реИред рдКрдВрдЪрд╛рдИ, рд▓рдЧрд╛рддрд╛рд░ рдмрд╛рд░рд┐рд╢ рдЪрд╛рд╣рд┐рдПред"
        },
        "tea": {
            "en": "Tea is a perennial evergreen shrub. Prefers cool, misty climate. Well-drained acidic soil needed. Harvest young leaves regularly.",
            "ta": "родрпЗропро┐ро▓рпИ рокро▓ роЖрогрпНроЯрпБ рокроЪрпБроорпИропро╛рой рокрпБродро░рпН. роХрпБро│ро┐ро░рпН, роорпВроЯрпБрокройро┐ роХро╛ро▓роиро┐ро▓рпИропрпИ ро╡ро┐ро░рпБроорпНрокрпБроорпНред",
            "te": "р░др▒Зр░ир▒Ар░░р▒Б р░мр░╣р▒Бр░Пр░│р▒Нр░▓ р░╕р░др░д р░╣р░░р░┐р░д р░кр▒Кр░ж. р░Ър░▓р▒Нр░▓р░ир░┐, р░кр▒Кр░Чр░ор░Вр░Ър▒Бр░др▒Л р░Хр▒Вр░бр░┐р░и р░╡р░╛р░др░╛р░╡р░░р░гр░╛р░ир▒Нр░ир░┐ р░Зр░╖р▒Нр░Яр░кр░бр▒Бр░др▒Бр░Вр░жр░┐ред",
            "ml": "р┤Ър┤╛р┤п р┤мр┤╣р╡Бр┤╡р┤╛р╡╝р┤╖р┤┐р┤Х р┤ир┤┐р┤др╡Нр┤пр┤╣р┤░р┤┐р┤д р┤Хр╡Бр┤▒р╡Нр┤▒р┤┐р┤Ър╡Нр┤Ър╡Жр┤Яр┤┐. р┤др┤гр╡Бр┤др╡Нр┤др┤др╡Бр┤В р┤ор╡Вр┤Яр┤┐р┤Хр╡Нр┤Хр╡Жр┤Яр╡Нр┤Яр┤┐р┤пр┤др╡Бр┤ор┤╛р┤п р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е р┤Зр┤╖р╡Нр┤Яр┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤ир╡Нр┤ир╡Бред",
            "hi": "рдЪрд╛рдп рдмрд╛рд░рд╣рдорд╛рд╕реА рд╕рджрд╛рдмрд╣рд╛рд░ рдЭрд╛рдбрд╝реА рд╣реИред рдардВрдбреА, рдзреБрдВрдзрд▓реА рдЬрд▓рд╡рд╛рдпреБ рдкрд╕рдВрдж рдХрд░рддреА рд╣реИред"
        }
    },
    "soil": {
        "clay": {
            "en": "Clay soil retains water well but drains slowly. Good for rice cultivation. Add organic matter to improve drainage. Test pH regularly. Suitable for crops that need consistent moisture.",
            "ta": "роХро│ро┐роорогрпН роорогрпН роирпАро░рпИ роиройрпНро▒ро╛роХ родроХрпНроХро╡рпИроХрпНроХро┐ро▒родрпБ роЖройро╛ро▓рпН роорпЖродрпБро╡ро╛роХ ро╡роЯро┐роХро┐ро▒родрпБ. роирпЖро▓рпН роЪро╛роХрпБрокроЯро┐роХрпНроХрпБ роиро▓рпНро▓родрпБ. ро╡роЯро┐роХро╛ро▓рпН роорпЗроорпНрокроЯрпБродрпНрод роХро░ро┐роо рокрпКро░рпБроЯрпНроХро│рпИ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН.",
            "te": "р░ор░Яр▒Нр░Яр░┐ р░ор░Вр░Ър░┐р░Чр░╛ р░ир▒Ар░░р▒Б р░ир░┐р░▓р▒Бр░кр▒Бр░Хр▒Бр░Вр░Яр▒Бр░Вр░жр░┐ р░Хр░╛р░ир▒А р░ир▒Жр░ор▒Нр░ор░жр░┐р░Чр░╛ р░кр░╛р░░р░┐р░кр▒Лр░др▒Бр░Вр░жр░┐. р░╡р░░р░┐ р░╕р░╛р░Чр▒Бр░Хр▒Б р░ор░Вр░Ър░┐р░жр░┐. р░ир▒Ар░Яр░┐ р░╡р░бр░кр▒Лр░др░ир▒Б р░ор▒Жр░░р▒Бр░Чр▒Бр░кр░░р░Ър░бр░╛р░ир░┐р░Хр░┐ р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░кр░жр░╛р░░р▒Нр░ер░╛р░▓р░ир▒Б р░Хр░▓р░кр░Вр░бр░┐.",
            "ml": "р┤Хр┤│р┤┐р┤ор┤гр╡Нр┤гр╡Н р┤╡р╡Жр┤│р╡Нр┤│р┤В р┤ир┤ир╡Нр┤ир┤╛р┤пр┤┐ р┤ир┤┐р┤▓р┤ир┤┐р╡╝р┤др╡Нр┤др╡Бр┤ир╡Нр┤ир╡Б р┤кр┤Хр╡Нр┤╖р╡З р┤кр┤др╡Бр┤Хр╡Нр┤Хр╡Ж р┤Тр┤┤р╡Бр┤Хр╡Бр┤ир╡Нр┤ир╡Б. р┤ир╡Жр┤▓р╡Нр┤▓р╡Бр┤Хр╡Гр┤╖р┤┐р┤Хр╡Нр┤Хр╡Н р┤ир┤▓р╡Нр┤▓р┤др╡Н. р┤бр╡Нр┤░р╡Жр┤пр┤┐р┤ир╡Зр┤Ьр╡Н р┤ор╡Жр┤Ър╡Нр┤Ър┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤др╡Нр┤др┤╛р╡╗ р┤Ьр╡Ир┤╡р┤╡р┤╕р╡Нр┤др╡Бр┤Хр╡Нр┤Хр╡╛ р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х."
        },
        "sandy": {
            "en": "Sandy soil drains quickly but requires frequent irrigation. Good for root vegetables. Add compost to retain nutrients. Suitable for crops like carrots, potatoes, onions.",
            "ta": "роорогро▓рпН роорогрпН ро╡ро┐ро░рпИро╡ро╛роХ ро╡роЯро┐роХро┐ро▒родрпБ роЖройро╛ро▓рпН роЕроЯро┐роХрпНроХроЯро┐ роирпАро░рпНрокрпНрокро╛роЪройроорпН родрпЗро╡рпИ. ро╡рпЗро░рпН роХро╛ропрпНроХро▒ро┐роХро│рпБроХрпНроХрпБ роиро▓рпНро▓родрпБ. роКроЯрпНроЯроЪрпНроЪродрпНродрпБроХрпНроХро│рпИ родроХрпНроХро╡рпИроХрпНроХ роХроорпНрокрпЛро╕рпНроЯрпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН.",
            "te": "р░Зр░╕р▒Бр░Х р░ор░Яр▒Нр░Яр░┐ р░др▒Нр░╡р░░р░Чр░╛ р░кр░╛р░░р░┐р░кр▒Лр░др▒Бр░Вр░жр░┐ р░Хр░╛р░ир▒А р░др░░р░Ър▒Бр░Чр░╛ р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓ р░Ер░╡р░╕р░░р░В. р░╡р▒Зр░░р▒Н р░Хр▒Вр░░р░Чр░╛р░пр░▓р░Хр▒Б р░ор░Вр░Ър░┐р░жр░┐. р░кр▒Лр░╖р░Хр░╛р░▓р░ир▒Б р░ир░┐р░▓р▒Бр░кр▒Бр░Хр▒Лр░╡р░бр░╛р░ир░┐р░Хр░┐ р░Хр░Вр░кр▒Лр░╕р▒Нр░Яр▒Н р░Ър▒Зр░░р▒Нр░Ър░Вр░бр░┐.",
            "ml": "р┤ор┤гр╡╜р┤ор┤гр╡Нр┤гр╡Н р┤╡р╡Зр┤Чр┤др╡Нр┤др┤┐р╡╜ р┤Тр┤┤р╡Бр┤Хр╡Бр┤ир╡Нр┤ир╡Б р┤кр┤Хр╡Нр┤╖р╡З р┤Зр┤Яр┤пр╡Нр┤Хр╡Нр┤Хр┤┐р┤Яр╡Ж р┤ир┤ир┤пр╡Нр┤Хр╡Нр┤Хр╡Зр┤гр╡Нр┤Яр┤др╡Бр┤гр╡Нр┤Яр╡Н. р┤▒р╡Вр┤Яр╡Нр┤Яр╡Н р┤кр┤Ър╡Нр┤Ър┤Хр╡Нр┤Хр┤▒р┤┐р┤Хр╡╛р┤Хр╡Нр┤Хр╡Н р┤ир┤▓р╡Нр┤▓р┤др╡Н. р┤кр╡Лр┤╖р┤Хр┤Щр╡Нр┤Щр╡╛ р┤ир┤┐р┤▓р┤ир┤┐р╡╝р┤др╡Нр┤др┤╛р╡╗ р┤Хр┤ор╡Нр┤кр╡Лр┤╕р╡Нр┤▒р╡Нр┤▒р╡Н р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х."
        },
        "loamy": {
            "en": "Loamy soil is ideal for most crops. Perfect balance of drainage and retention. Rich in nutrients. Suitable for vegetables, fruits, grains. Maintain with organic matter.",
            "ta": "роХро│ро┐ржорогрпН роХро▓роирпНрод роорогрпН рокрпЖро░рпБроорпНрокро╛ро▓ро╛рой рокропро┐ро░рпНроХро│рпБроХрпНроХрпБ роПро▒рпНро▒родрпБ. ро╡роЯро┐роХро╛ро▓рпН рооро▒рпНро▒рпБроорпН родроХрпНроХро╡рпИрокрпНрокро┐ройрпН роЪро░ро┐ропро╛рой роЪроороиро┐ро▓рпИ. роКроЯрпНроЯроЪрпНроЪродрпНродрпБ роиро┐ро▒рпИроирпНродродрпБ.",
            "te": "р░▓р▒Зр░д р░ор░Яр▒Нр░Яр░┐ р░Ър░╛р░▓р░╛ р░кр░Вр░Яр░▓р░Хр▒Б р░Ер░ир▒Бр░╡р▒Ир░ир░жр░┐. р░бр▒Нр░░р▒Ир░ир▒Зр░Ьр▒Н р░ор░░р░┐р░пр▒Б р░░р░┐р░Яр▒Жр░ир▒Нр░╖р░ир▒Н р░пр▒Кр░Хр▒Нр░Х р░кр░░р░┐р░кр▒Вр░░р▒Нр░г р░╕р░ор░др▒Бр░▓р▒Нр░пр░д. р░кр▒Лр░╖р░Хр░╛р░▓р░др▒Л р░╕р░ор▒Гр░жр▒Нр░зр░┐р░Чр░╛ р░Йр░Вр░Яр▒Бр░Вр░жр░┐.",
            "ml": "р┤кр┤╢р┤┐р┤ор┤ор┤гр╡Нр┤гр╡Н р┤ор┤┐р┤Хр╡Нр┤Х р┤╡р┤┐р┤│р┤Хр╡╛р┤Хр╡Нр┤Хр╡Бр┤В р┤Ер┤ир╡Бр┤пр╡Лр┤Ьр╡Нр┤пр┤В. р┤бр╡Нр┤░р╡Жр┤пр┤┐р┤ир╡Зр┤Ьр┤┐р┤ир╡Нр┤▒р╡Жр┤пр╡Бр┤В р┤ир┤┐р┤▓р┤ир┤┐р╡╝р┤др╡Нр┤др┤▓р┤┐р┤ир╡Нр┤▒р╡Жр┤пр╡Бр┤В р┤ор┤┐р┤Хр┤Ър╡Нр┤Ъ р┤╕р┤ир╡Нр┤др╡Бр┤▓р┤ир┤В. р┤кр╡Лр┤╖р┤Хр┤Щр╡Нр┤Щр┤│р┤╛р╡╜ р┤╕р┤ор╡Гр┤жр╡Нр┤зр┤В."
        }
    },
    "irrigation": {
        "drip": {
            "en": "Drip irrigation saves 30-50% water. Delivers water directly to plant roots. Reduces weed growth. Initial investment high but long-term savings. Best for row crops and orchards.",
            "ta": "роЪрпКроЯрпНроЯрпБ роирпАро░рпНрокрпНрокро╛роЪройроорпН 30-50% роирпАро░рпИ роЪрпЗрооро┐роХрпНроХро┐ро▒родрпБ. родро╛ро╡ро░ ро╡рпЗро░рпНроХро│рпБроХрпНроХрпБ роирпЗро░роЯро┐ропро╛роХ роирпАро░рпН ро╡ро┤роЩрпНроХрпБроХро┐ро▒родрпБ. роХро│рпИ ро╡ро│ро░рпНроЪрпНроЪро┐ропрпИ роХрпБро▒рпИроХрпНроХро┐ро▒родрпБ.",
            "te": "р░бр▒Нр░░р░┐р░кр▒Н р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓ 30-50% р░ир▒Ар░Яр░┐р░ир░┐ р░Жр░жр░╛ р░Ър▒Зр░╕р▒Нр░др▒Бр░Вр░жр░┐. р░ор▒Кр░Хр▒Нр░Хр░▓ р░╡р▒Зр░░р▒Нр░▓р░Хр▒Б р░ир▒Зр░░р▒Бр░Чр░╛ р░ир▒Ар░Яр░┐р░ир░┐ р░Ер░Вр░жр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐. р░Хр░▓р▒Бр░кр▒Б р░ор▒Кр░Хр▒Нр░Хр░▓ р░кр▒Жр░░р▒Бр░Чр▒Бр░жр░▓р░ир▒Б р░др░Чр▒Нр░Чр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐.",
            "ml": "р┤бр╡Нр┤░р┤┐р┤кр╡Нр┤кр╡Н р┤Ьр┤▓р┤╕р╡Зр┤Ър┤ир┤В 30-50% р┤╡р╡Жр┤│р╡Нр┤│р┤В р┤▓р┤╛р┤нр┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б. р┤Ър╡Жр┤Яр┤┐р┤Хр┤│р╡Бр┤Яр╡Ж р┤╡р╡Зр┤░р╡Бр┤Хр┤│р┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤ир╡Зр┤░р┤┐р┤Яр╡Нр┤Яр╡Н р┤╡р╡Жр┤│р╡Нр┤│р┤В р┤Ор┤др╡Нр┤др┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б. р┤Хр┤│р┤Хр┤│р╡Бр┤Яр╡Ж р┤╡р┤│р╡╝р┤Ър╡Нр┤Ъ р┤Хр╡Бр┤▒р┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б."
        },
        "sprinkler": {
            "en": "Sprinkler irrigation covers large areas efficiently. Good for uniform water distribution. Suitable for most field crops. Requires good water pressure. Can be automated easily.",
            "ta": "родрпЖро│ро┐рокрпНрокрпБ роирпАро░рпНрокрпНрокро╛роЪройроорпН рокрпЖро░ро┐роп рокроХрпБродро┐роХро│рпИ родро┐ро▒роорпИропро╛роХ роорпВроЯрпБроХро┐ро▒родрпБ. роЪрпАро░ро╛рой роирпАро░рпН ро╡ро┐роиро┐ропрпЛроХродрпНродро┐ро▒рпНроХрпБ роиро▓рпНро▓родрпБ. рокрпЖро░рпБроорпНрокро╛ро▓ро╛рой ро╡ропро▓рпН рокропро┐ро░рпНроХро│рпБроХрпНроХрпБ роПро▒рпНро▒родрпБ.",
            "te": "р░╕р▒Нр░кр▒Нр░░р░┐р░Вр░Хр▒Нр░▓р░░р▒Н р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓ р░кр▒Жр░жр▒Нр░ж р░кр▒Нр░░р░╛р░Вр░др░╛р░▓р░ир▒Б р░╕р░ор░░р▒Нр░ер░╡р░Вр░др░Вр░Чр░╛ р░Хр░╡р░░р▒Н р░Ър▒Зр░╕р▒Нр░др▒Бр░Вр░жр░┐. р░Пр░Хр░░р▒Ар░др░┐ р░ир▒Ар░Яр░┐ р░кр░Вр░кр░┐р░гр▒Ар░Хр░┐ р░ор░Вр░Ър░┐р░жр░┐. р░Ър░╛р░▓р░╛ р░╡р░░р░▓ р░кр░Вр░Яр░▓р░Хр▒Б р░Ер░ир▒Бр░Хр▒Вр░▓р░В.",
            "ml": "р┤╕р╡Нр┤кр╡Нр┤░р┤┐р┤Щр╡Нр┤Хр╡Нр┤│р╡╝ р┤Ьр┤▓р┤╕р╡Зр┤Ър┤ир┤В р┤╡р┤▓р┤┐р┤п р┤кр╡Нр┤░р┤жр╡Зр┤╢р┤Щр╡Нр┤Щр┤│р╡Ж р┤Хр┤╛р┤░р╡Нр┤пр┤Хр╡Нр┤╖р┤ор┤ор┤╛р┤пр┤┐ р┤ор╡Вр┤Яр╡Бр┤ир╡Нр┤ир╡Б. р┤Пр┤Хр╡Ар┤Хр╡Гр┤д р┤Ьр┤▓ р┤╡р┤┐р┤др┤░р┤гр┤др╡Нр┤др┤┐р┤ир╡Н р┤ир┤▓р╡Нр┤▓р┤др╡Н. р┤ор┤┐р┤Хр╡Нр┤Х р┤╡р┤пр╡╜ р┤╡р┤┐р┤│р┤Хр╡╛р┤Хр╡Нр┤Хр╡Бр┤В р┤Ер┤ир╡Бр┤пр╡Лр┤Ьр╡Нр┤пр┤В."
        }
    },
    "diseases": {
        "blight": {
            "en": "Blight causes dark spots on leaves and stems. Caused by fungal infection. Remove affected parts immediately. Use copper-based fungicides. Ensure good air circulation.",
            "ta": "роХро░рпБроорпИ роирпЛропрпН роЗро▓рпИроХро│рпН рооро▒рпНро▒рпБроорпН родрогрпНроЯрпБроХро│ро┐ро▓рпН роХро░рпБроорпИропро╛рой рокрпБро│рпНро│ро┐роХро│рпИ роПро▒рпНрокроЯрпБродрпНродрпБроХро┐ро▒родрпБ. рокрпВроЮрпНроЪрпИ родрпКро▒рпНро▒ро╛ро▓рпН роПро▒рпНрокроЯрпБроХро┐ро▒родрпБ. рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ рокроХрпБродро┐роХро│рпИ роЙроЯройрпЗ роЕроХро▒рпНро▒ро╡рпБроорпН.",
            "te": "р░мр▒Нр░▓р▒Ир░Яр▒Н р░Жр░Хр▒Бр░▓р▒Б р░ор░░р░┐р░пр▒Б р░Хр░╛р░Вр░бр░╛р░▓р░кр▒И р░ор▒Бр░жр▒Бр░░р▒Б р░ор░Ър▒Нр░Ър░▓р░ир▒Б р░Хр░▓р░┐р░Чр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐. р░лр░Вр░Чр░▓р▒Н р░Зр░ир▒Нр░лр▒Жр░Хр▒Нр░╖р░ир▒Н р░╡р░▓р▒Нр░▓ р░Хр░▓р▒Бр░Чр▒Бр░др▒Бр░Вр░жр░┐. р░кр▒Нр░░р░нр░╛р░╡р░┐р░д р░нр░╛р░Чр░╛р░▓р░ир▒Б р░╡р▒Жр░Вр░Яр░ир▒З р░др▒Кр░▓р░Чр░┐р░Вр░Ър░Вр░бр░┐.",
            "ml": "р┤мр╡Нр┤▓р╡Ир┤▒р╡Нр┤▒р╡Н р┤Зр┤▓р┤Хр┤│р┤┐р┤▓р╡Бр┤В р┤др┤гр╡Нр┤Яр╡Бр┤Хр┤│р┤┐р┤▓р╡Бр┤В р┤Зр┤░р╡Бр┤гр╡Нр┤Я р┤кр┤╛р┤Яр╡Бр┤Хр╡╛ р┤Йр┤гр╡Нр┤Яр┤╛р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б. р┤лр┤Вр┤Чр╡╜ р┤Ер┤гр╡Бр┤мр┤╛р┤з р┤ор╡Вр┤▓р┤ор┤╛р┤гр╡Н р┤Зр┤др╡Н р┤╕р┤Вр┤нр┤╡р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир┤др╡Н. р┤мр┤╛р┤зр┤┐р┤д р┤нр┤╛р┤Чр┤Щр╡Нр┤Щр╡╛ р┤Йр┤Яр┤ир╡Ж р┤ир╡Ар┤Хр╡Нр┤Хр┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х."
        }
    }
}

# Load Knowledge Base (external JSON if present; fallback to built-in)
DATA_PATH = Path(__file__).parent / "data" / "agri_kb.json"

def load_kb() -> Dict[str, Dict]:
    if DATA_PATH.exists():
        try:
            with open(DATA_PATH, "r", encoding="utf-8") as f:
                kb = json.load(f)
            logger.info(f"ЁЯУЪ Loaded external KB: {DATA_PATH}")
            return kb
        except Exception as e:
            logger.warning(f"Could not load external KB ({e}), using built-in fallback.")
    return FALLBACK_KB

AGRICULTURE_KB = load_kb()

# Multilingual, character n-gram based RAG index with crop/soil boosting
kb_index: Dict[str, Dict] = {}

def build_lang_index(lang: str):
    texts: List[str] = []
    keys: List[Tuple[str, str]] = []

    for category, items in AGRICULTURE_KB.items():
        for item, langs in items.items():
            content = (langs.get(lang) or langs.get('en') or '').strip()
            if content:
                texts.append(content)
                keys.append((category, item))

    if not texts:
        # fallback to English entries if none for the language
        for category, items in AGRICULTURE_KB.items():
            for item, langs in items.items():
                content = (langs.get('en') or '').strip()
                if content:
                    texts.append(content)
                    keys.append((category, item))

    vect = TfidfVectorizer(
        analyzer='char_wb',
        ngram_range=(3, 5),
        min_df=1,
        max_features=5000
    )
    mat = vect.fit_transform(texts)

    kb_index[lang] = {
        'vectorizer': vect,
        'vectors': mat,
        'keys': keys,
        'texts': texts
    }
    logger.info(f"тЬЕ RAG index built for '{lang}' with {len(texts)} entries")

def ensure_lang_index(lang: str):
    if lang not in kb_index:
        build_lang_index(lang)

def detect_explicit_crop(query: str, language: str) -> str:
    """Detect crop mentions in multiple languages"""
    crop_synonyms = {
        'en': {
            # Cereals
            'rice': 'rice', 'paddy': 'rice', 'wheat': 'wheat', 'corn': 'corn', 'maize': 'corn',
            'barley': 'barley', 'oats': 'oats', 'millet': 'millet', 'quinoa': 'quinoa',
            # Legumes
            'soybeans': 'soybeans', 'soy': 'soybeans', 'chickpeas': 'chickpeas', 'lentils': 'lentils',
            'beans': 'beans', 'peas': 'peas', 'groundnut': 'groundnut', 'peanut': 'groundnut',
            # Vegetables
            'tomato': 'tomatoes', 'tomatoes': 'tomatoes', 'potato': 'potatoes', 'potatoes': 'potatoes',
            'onion': 'onions', 'onions': 'onions', 'carrot': 'carrots', 'carrots': 'carrots',
            'cabbage': 'cabbage', 'lettuce': 'lettuce', 'spinach': 'spinach', 'broccoli': 'broccoli',
            # Fruits
            'apple': 'apples', 'apples': 'apples', 'orange': 'oranges', 'oranges': 'oranges',
            'banana': 'bananas', 'bananas': 'bananas', 'grape': 'grapes', 'grapes': 'grapes',
            'mango': 'mango', 'papaya': 'papaya', 'pineapple': 'pineapple',
            # Cash crops
            'cotton': 'cotton', 'sugarcane': 'sugarcane', 'coffee': 'coffee', 'tea': 'tea',
            'tobacco': 'tobacco', 'rubber': 'rubber'
        },
        'ta': {
            # Tamil crop names
            'роЕро░ро┐роЪро┐': 'rice', 'роирпЖро▓рпН': 'rice', 'роХрпЛродрпБроорпИ': 'wheat', 'роЪрпЛро│роорпН': 'corn',
            'роХрпЗро┤рпНро╡ро░роХрпБ': 'millet', 'рокро╛ро░рпНро▓ро┐': 'barley', 'ро╡рпЖрогрпНрогрпИропроЯрпБроЩрпН': 'barley',
            'роЪрпЛропро╛рокрпАройрпН': 'soybeans', 'роХрпКрогрпНроЯрпИроХрпНроХроЯро▓рпИ': 'chickpeas', 'рокро░рпБрокрпНрокрпБ': 'lentils',
            'родроХрпНроХро╛ро│ро┐': 'tomatoes', 'роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ': 'potatoes', 'ро╡рпЖроЩрпНроХро╛ропроорпН': 'onions',
            'роХрпЗро░роЯрпН': 'carrots', 'роорпБроЯрпНроЯрпИроХрпНроХрпЛро╕рпН': 'cabbage', 'роХрпАро░рпИ': 'spinach',
            'роЖрокрпНрокро┐ро│рпН': 'apples', 'роЖро░роЮрпНроЪрпБ': 'oranges', 'ро╡ро╛ро┤рпИрокрпНрокро┤роорпН': 'bananas',
            'родро┐ро░ро╛роЯрпНроЪрпИ': 'grapes', 'рооро╛роорпНрокро┤роорпН': 'mango', 'рокрокрпНрокро╛ро│ро┐': 'papaya',
            'рокро░рпБродрпНродро┐': 'cotton', 'роХро░рпБроорпНрокрпБ': 'sugarcane', 'роХро╛рокро┐': 'coffee', 'родрпЗропро┐ро▓рпИ': 'tea'
        },
        'te': {
            # Telugu crop names
            'р░╡р░░р░┐': 'rice', 'р░мр░┐р░пр▒Нр░пр░В': 'rice', 'р░Чр▒Лр░зр▒Бр░о': 'wheat', 'р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и': 'corn',
            'р░Ьр▒Кр░ир▒Нр░и': 'millet', 'р░мр░╛р░░р▒Нр░▓р▒А': 'barley', 'р░╡р▒Лр░Яр▒Нр░╕р▒Н': 'oats',
            'р░╕р▒Лр░пр░╛р░мр▒Ар░ир▒Нр░╕р▒Н': 'soybeans', 'р░╢р░ир░Чр░▓р▒Б': 'chickpeas', 'р░ор░╕р▒Вр░░р▒Н': 'lentils',
            'р░Яр░ор▒Лр░Яр░╛': 'tomatoes', 'р░мр░Вр░Чр░╛р░│р░╛р░жр▒Бр░Вр░к': 'potatoes', 'р░Йр░▓р▒Нр░▓р░┐р░кр░╛р░пр░▓р▒Б': 'onions',
            'р░Хр▒Нр░пр░╛р░░р▒Жр░Яр▒Н': 'carrots', 'р░Хр░╛р░мр▒Зр░Ьр▒А': 'cabbage', 'р░кр░╛р░▓р░Хр▒Вр░░': 'spinach',
            'р░Жр░кр░┐р░▓р▒Нр░╕р▒Н': 'apples', 'р░ир░╛р░░р░┐р░Вр░Ьр░▓р▒Б': 'oranges', 'р░Ер░░р░Яр░┐р░кр░Вр░бр▒Нр░▓р▒Б': 'bananas',
            'р░жр▒Нр░░р░╛р░Хр▒Нр░╖р░▓р▒Б': 'grapes', 'р░ор░╛р░ор░┐р░бр░┐р░кр░Вр░бр▒Б': 'mango', 'р░мр▒Кр░кр▒Нр░кр░╛р░пр░┐': 'papaya',
            'р░кр░др▒Нр░др░┐': 'cotton', 'р░Ър▒Жр░░р░Хр▒Б': 'sugarcane', 'р░Хр░╛р░лр▒А': 'coffee', 'р░др▒Зр░ир▒Ар░░р▒Б': 'tea'
        },
        'ml': {
            # Malayalam crop names
            'р┤Ер┤░р┤┐': 'rice', 'р┤ир╡Жр╡╜': 'rice', 'р┤Чр╡Лр┤др┤ор╡Нр┤кр╡Н': 'wheat', 'р┤Ър╡Лр┤│р┤В': 'corn',
            'р┤Хр╡Зр┤┤р╡Нр┤╡р┤░р┤Хр╡Б': 'millet', 'р┤мр┤╛р╡╝р┤▓р┤┐': 'barley', 'р┤Ур┤Яр╡Нр┤╕р╡Н': 'oats',
            'р┤╕р╡Лр┤пр┤╛р┤мр╡Ар╡╗': 'soybeans', 'р┤Ър╡Жр┤▒р╡Бр┤кр┤пр╡╝': 'chickpeas', 'р┤кр┤пр╡╝': 'lentils',
            'р┤др┤Хр╡Нр┤Хр┤╛р┤│р┤┐': 'tomatoes', 'р┤Йр┤░р╡Бр┤│р┤Хр╡Нр┤Хр┤┐р┤┤р┤Щр╡Нр┤Щр╡Н': 'potatoes', 'р┤Йр┤│р╡Нр┤│р┤┐': 'onions',
            'р┤Хр┤╛р┤░р┤▒р╡Нр┤▒р╡Н': 'carrots', 'р┤Хр┤╛р┤мр╡Зр┤Ьр╡Н': 'cabbage', 'р┤Ър╡Ар┤░': 'spinach',
            'р┤Жр┤кр╡Нр┤кр┤┐р╡╛': 'apples', 'р┤Ур┤▒р┤Юр╡Нр┤Ър╡Н': 'oranges', 'р┤╡р┤╛р┤┤р┤кр╡Нр┤кр┤┤р┤В': 'bananas',
            'р┤ор╡Бр┤ир╡Нр┤др┤┐р┤░р┤┐': 'grapes', 'р┤ор┤╛р┤ор╡Нр┤кр┤┤р┤В': 'mango', 'р┤кр┤кр╡Нр┤кр┤╛р┤п': 'papaya',
            'р┤кр┤░р╡Бр┤др╡Нр┤др┤┐': 'cotton', 'р┤Хр┤░р┤┐р┤ор╡Нр┤кр╡Н': 'sugarcane', 'р┤Хр┤╛р┤кр╡Нр┤кр┤┐': 'coffee', 'р┤Ър┤╛р┤п': 'tea'
        },
        'hi': {
            # Hindi crop names
            'рдЪрд╛рд╡рд▓': 'rice', 'рдзрд╛рди': 'rice', 'рдЧреЗрд╣реВрдВ': 'wheat', 'рдордХреНрдХрд╛': 'corn',
            'рдмрд╛рдЬрд░рд╛': 'millet', 'рдЬреМ': 'barley', 'рдЬрдИ': 'oats',
            'рд╕реЛрдпрд╛рдмреАрди': 'soybeans', 'рдЪрдирд╛': 'chickpeas', 'рдорд╕реВрд░': 'lentils',
            'рдЯрдорд╛рдЯрд░': 'tomatoes', 'рдЖрд▓реВ': 'potatoes', 'рдкреНрдпрд╛рдЬ': 'onions',
            'рдЧрд╛рдЬрд░': 'carrots', 'рдкрддреНрддрд╛рдЧреЛрднреА': 'cabbage', 'рдкрд╛рд▓рдХ': 'spinach',
            'рд╕реЗрдм': 'apples', 'рд╕рдВрддрд░рд╛': 'oranges', 'рдХреЗрд▓рд╛': 'bananas',
            'рдЕрдВрдЧреВрд░': 'grapes', 'рдЖрдо': 'mango', 'рдкрдкреАрддрд╛': 'papaya',
            'рдХрдкрд╛рд╕': 'cotton', 'рдЧрдиреНрдирд╛': 'sugarcane', 'рдХреЙрдлреА': 'coffee', 'рдЪрд╛рдп': 'tea'
        }
    }
    
    mapping = crop_synonyms.get(language, crop_synonyms['en'])
    query_lower = query.lower()
    
    for crop_name, standardized_name in mapping.items():
        if crop_name.lower() in query_lower:
            return standardized_name
    
    return ""

def is_agriculture_related(query: str, language: str) -> bool:
    """Check if query is agriculture-related and reject non-agricultural queries"""
    agriculture_keywords = {
        'en': [
            'crop', 'farming', 'agriculture', 'plant', 'soil', 'fertilizer', 'pest', 'disease',
            'irrigation', 'harvest', 'seed', 'growth', 'cultivation', 'farm', 'field',
            'pesticide', 'herbicide', 'organic', 'yield', 'planting', 'sowing', 'tractor',
            'compost', 'manure', 'greenhouse', 'nursery', 'pruning', 'grafting', 'weather',
            'climate', 'rain', 'drought', 'water', 'nitrogen', 'phosphorus', 'potassium',
            'ph', 'acidity', 'alkaline', 'mulch', 'weeds', 'insects', 'fungus', 'bacteria',
            'rice', 'wheat', 'corn', 'barley', 'oats', 'tomato', 'potato', 'onion', 'carrot',
            'apple', 'orange', 'banana', 'grape', 'cotton', 'sugarcane', 'coffee', 'tea',
            'beans', 'peas', 'lentil', 'soybean', 'cabbage', 'lettuce', 'spinach', 'mango'
        ],
        'ta': [
            'рокропро┐ро░рпН', 'ро╡ро┐ро╡роЪро╛ропроорпН', 'ро╡рпЗро│ро╛рогрпНроорпИ', 'родро╛ро╡ро░роорпН', 'роорогрпН', 'роЙро░роорпН', 'рокрпВроЪрпНроЪро┐', 'роирпЛропрпН',
            'роирпАро░рпНрокрпНрокро╛роЪройроорпН', 'роЕро▒рпБро╡роЯрпИ', 'ро╡ро┐родрпИ', 'ро╡ро│ро░рпНроЪрпНроЪро┐', 'роЪро╛роХрпБрокроЯро┐', 'ро╡ропро▓рпН', 'роЕро░ро┐роЪро┐', 'роирпЖро▓рпН',
            'роХрпЛродрпБроорпИ', 'родроХрпНроХро╛ро│ро┐', 'роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ', 'ро╡рпЖроЩрпНроХро╛ропроорпН', 'роХрпЗро░роЯрпН', 'роЖрокрпНрокро┐ро│рпН', 'рокро░рпБродрпНродро┐',
            'рокрпВроЪрпНроЪро┐роХрпНроХрпКро▓рпНро▓ро┐', 'роХро│рпИроХрпНроХрпКро▓рпНро▓ро┐', 'роХро░ро┐роо', 'ро╡ро┐ро│рпИроЪрпНроЪро▓рпН', 'роироЯро╡рпБ', 'роХро░рпБроорпНрокрпБ', 'роХро╛рокро┐'
        ],
        'te': [
            'р░кр░Вр░Я', 'р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В', 'р░╡р▒Зр░╖р░зр░╛р░░р░г', 'р░ор▒Кр░Хр▒Нр░Х', 'р░ор░Яр▒Нр░Яр░┐', 'р░Ор░░р▒Бр░╡р▒Бр░▓р▒Б', 'р░Хр▒Ар░Яр░Хр░╛р░▓р▒Б', 'р░╡р▒Нр░пр░╛р░зр░┐',
            'р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓', 'р░Хр▒Лр░д', 'р░╡р░┐р░др▒Нр░др░ир░В', 'р░кр▒Жр░░р▒Бр░Чр▒Бр░жр░▓', 'р░╕р░╛р░Чр▒Б', 'р░кр▒Кр░▓р░В', 'р░╡р░░р░┐', 'р░Чр▒Лр░зр▒Бр░о',
            'р░Яр░ор▒Лр░Яр░╛', 'р░мр░Вр░Чр░╛р░│р░╛р░жр▒Бр░Вр░к', 'р░Йр░▓р▒Нр░▓р░┐р░кр░╛р░пр░▓р▒Б', 'р░Хр▒Нр░пр░╛р░░р▒Жр░Яр▒Н', 'р░Жр░кр░┐р░▓р▒Нр░╕р▒Н', 'р░кр░др▒Нр░др░┐', 'р░Ър▒Жр░░р░Хр▒Б'
        ],
        'ml': [
            'р┤╡р┤┐р┤│', 'р┤Хр╡Гр┤╖р┤┐', 'р┤Хр┤╛р╡╝р┤╖р┤┐р┤Хр┤В', 'р┤Ър╡Жр┤Яр┤┐', 'р┤ор┤гр╡Нр┤гр╡Н', 'р┤╡р┤│р┤В', 'р┤Хр╡Ар┤Яр┤В', 'р┤░р╡Лр┤Чр┤В',
            'р┤Ьр┤▓р┤╕р╡Зр┤Ър┤ир┤В', 'р┤╡р┤┐р┤│р┤╡р╡Жр┤Яр╡Бр┤кр╡Нр┤кр╡Н', 'р┤╡р┤┐р┤др╡Нр┤др╡Н', 'р┤╡р┤│р╡╝р┤Ър╡Нр┤Ъ', 'р┤Хр╡Гр┤╖р┤┐', 'р┤╡р┤пр╡╜', 'р┤Ер┤░р┤┐', 'р┤Чр╡Лр┤др┤ор╡Нр┤кр╡Н',
            'р┤др┤Хр╡Нр┤Хр┤╛р┤│р┤┐', 'р┤Йр┤░р╡Бр┤│р┤Хр╡Нр┤Хр┤┐р┤┤р┤Щр╡Нр┤Щр╡Н', 'р┤Йр┤│р╡Нр┤│р┤┐', 'р┤Хр┤╛р┤░р┤▒р╡Нр┤▒р╡Н', 'р┤Жр┤кр╡Нр┤кр┤┐р╡╛', 'р┤кр┤░р╡Бр┤др╡Нр┤др┤┐', 'р┤Хр┤░р┤┐р┤ор╡Нр┤кр╡Н'
        ],
        'hi': [
            'рдлрд╕рд▓', 'рдЦреЗрддреА', 'рдХреГрд╖рд┐', 'рдкреМрдзрд╛', 'рдорд┐рдЯреНрдЯреА', 'рдЦрд╛рдж', 'рдХреАрдЯ', 'рдмреАрдорд╛рд░реА',
            'рд╕рд┐рдВрдЪрд╛рдИ', 'рдХрдЯрд╛рдИ', 'рдмреАрдЬ', 'рд╡реГрджреНрдзрд┐', 'рдЦреЗрддреА', 'рдЦреЗрдд', 'рдЪрд╛рд╡рд▓', 'рдЧреЗрд╣реВрдВ',
            'рдЯрдорд╛рдЯрд░', 'рдЖрд▓реВ', 'рдкреНрдпрд╛рдЬ', 'рдЧрд╛рдЬрд░', 'рд╕реЗрдм', 'рдХрдкрд╛рд╕', 'рдЧрдиреНрдирд╛'
        ]
    }
    
    # First check for crop names (most important)
    crop_detected = detect_explicit_crop(query, language)
    if crop_detected:
        return True
    
    # Get keywords for the language
    keywords = agriculture_keywords.get(language, agriculture_keywords['en'])
    query_lower = query.lower()
    
    # Check if any agriculture keyword is present
    for keyword in keywords:
        if keyword.lower() in query_lower:
            return True
    
    # Additional check for common agriculture phrases
    agri_phrases = {
        'en': ['grow', 'plant', 'farm', 'soil', 'water', 'sun', 'season', 'harvest', 'food production', 'agricultural'],
        'ta': ['ро╡ро│ро░рпН', 'роироЯ', 'рокропро┐ро░рпН', 'роЙрогро╡рпБ', 'рооро┤рпИ', 'роХро╛ро▓роиро┐ро▓рпИ'],
        'te': ['р░кр▒Жр░░р▒Бр░Чр▒Б', 'р░ир░╛р░Я', 'р░кр░Вр░Я', 'р░Жр░╣р░╛р░░р░В', 'р░╡р░░р▒Нр░╖р░В', 'р░╡р░╛р░др░╛р░╡р░░р░гр░В'],
        'ml': ['р┤╡р┤│р╡╝', 'р┤ир┤Я', 'р┤╡р┤┐р┤│', 'р┤нр┤Хр╡Нр┤╖р┤гр┤В', 'р┤ор┤┤', 'р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е'],
        'hi': ['рдЙрдЧ', 'рд▓рдЧрд╛', 'рдлрд╕рд▓', 'рднреЛрдЬрди', 'рдмрд╛рд░рд┐рд╢', 'рдореМрд╕рдо']
    }
    
    phrases = agri_phrases.get(language, agri_phrases['en'])
    for phrase in phrases:
        if phrase.lower() in query_lower:
            return True
    
    # If nothing matches, it's probably not agriculture-related
    return False

class QueryRequest(BaseModel):
    query: str
    language: str = "en"
    mode: str = "direct"
    user_type: str = "farmer"  # farmer, expert, student
    crop_type: str = ""
    land_size: str = ""
    soil_type: str = ""

def get_rag_context(query: str, language: str = "en", top_k: int = 3, user_crop: str = "", user_soil: str = ""):
    try:
        ensure_lang_index(language)
        idx = kb_index[language]
        vect = idx['vectorizer']
        mat = idx['vectors']
        keys = idx['keys']

        query_vector = vect.transform([query])
        similarities = cosine_similarity(query_vector, mat)[0]

        # Boost by selected crop/soil
        crop_boost = 0.25 if user_crop else 0.0
        soil_boost = 0.15 if user_soil else 0.0
        for i, (cat, item) in enumerate(keys):
            if user_crop and cat == 'crops' and item.lower() == user_crop.lower():
                similarities[i] += crop_boost
            if user_soil and cat == 'soil' and item.lower() == user_soil.lower():
                similarities[i] += soil_boost

        top_indices = similarities.argsort()[-top_k:][::-1]

        relevant_context = []
        for idx_i in top_indices:
            if similarities[idx_i] <= 0:
                continue
            category, item = keys[idx_i]
            context_data = AGRICULTURE_KB[category][item]
            content = context_data.get(language) or context_data.get('en', '')
            relevant_context.append({
                'category': category,
                'item': item,
                'content': content,
                'similarity': float(similarities[idx_i])
            })
        return relevant_context
    except Exception as e:
        logger.error(f"RAG error: {e}")
        return []

@app.get("/", response_class=HTMLResponse)
async def home():
    return """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
        <title>ЁЯМ╛ Fast Agriculture AI - Smart Assistant</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
                -webkit-tap-highlight-color: transparent;
            }
            body {
                font-family: 'Segoe UI', 'Roboto', sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                color: white;
                padding: 10px;
                overflow-x: hidden;
            }
            .container {
                max-width: 400px;
                margin: 0 auto;
                padding: 0 10px;
            }
            .header {
                text-align: center;
                margin-bottom: 20px;
                padding: 20px 0;
            }
            .header h1 {
                font-size: 2.2em;
                margin-bottom: 5px;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }
            .subtitle {
                font-size: 1em;
                opacity: 0.9;
                margin-bottom: 10px;
            }
            .demo-section {
                background: rgba(255, 255, 255, 0.15);
                border-radius: 15px;
                padding: 20px;
                margin: 15px 0;
                backdrop-filter: blur(10px);
            }
            .section-title {
                font-size: 1.3em;
                margin-bottom: 15px;
                text-align: center;
                color: #FFD700;
                font-weight: bold;
            }
            .option-grid {
                display: grid;
                grid-template-columns: 1fr;
                gap: 12px;
                margin-bottom: 20px;
            }
            .option-button {
                background: rgba(255, 255, 255, 0.2);
                border: 2px solid rgba(255, 255, 255, 0.3);
                border-radius: 12px;
                padding: 15px;
                color: white;
                font-size: 1.1em;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
                text-align: center;
                min-height: 60px;
                display: flex;
                align-items: center;
                justify-content: center;
                text-decoration: none;
            }
            .option-button:hover, .option-button.selected {
                background: rgba(255, 255, 255, 0.3);
                border-color: #FFD700;
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            }
            .option-button.selected {
                background: #FFD700;
                color: #333;
            }
            .quick-questions {
                display: grid;
                grid-template-columns: 1fr;
                gap: 10px;
            }
            .quick-question {
                background: rgba(76, 175, 80, 0.8);
                border: none;
                border-radius: 10px;
                padding: 12px;
                color: white;
                font-size: 1em;
                cursor: pointer;
                transition: all 0.3s ease;
                text-align: left;
                line-height: 1.4;
            }
            .quick-question:hover {
                background: rgba(76, 175, 80, 1);
                transform: translateY(-1px);
            }
            .input-section {
                margin: 20px 0;
            }
            .input-group {
                display: flex;
                flex-direction: column;
                gap: 12px;
                margin-bottom: 15px;
            }
            input, select, textarea {
                padding: 15px;
                border: none;
                border-radius: 10px;
                font-size: 16px;
                background: rgba(255, 255, 255, 0.9);
                color: #333;
                width: 100%;
            }
            textarea {
                min-height: 80px;
                resize: vertical;
            }
            .action-buttons {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 10px;
                margin: 15px 0;
            }
            .btn {
                padding: 15px;
                border: none;
                border-radius: 10px;
                font-size: 1.1em;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
                text-align: center;
            }
            .btn-primary {
                background: #4CAF50;
                color: white;
            }
            .btn-secondary {
                background: #FF9800;
                color: white;
            }
            .btn-voice {
                background: #2196F3;
                color: white;
            }
            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            }
            .response {
                background: rgba(255, 255, 255, 0.1);
                border-radius: 12px;
                padding: 20px;
                margin: 20px 0;
                min-height: 100px;
                white-space: pre-wrap;
                line-height: 1.6;
                font-size: 1.1em;
            }
            .loading {
                animation: pulse 1.5s infinite;
                text-align: center;
                font-size: 1.2em;
            }
            @keyframes pulse {
                0% { opacity: 1; }
                50% { opacity: 0.7; }
                100% { opacity: 1; }
            }
            .demo-info {
                background: rgba(76, 175, 80, 0.2);
                border-left: 4px solid #4CAF50;
                padding: 15px;
                margin: 15px 0;
                border-radius: 0 10px 10px 0;
                font-size: 0.95em;
            }
            .status-bar {
                background: rgba(0, 0, 0, 0.2);
                padding: 10px;
                border-radius: 8px;
                margin: 10px 0;
                font-size: 0.9em;
                text-align: center;
            }
            @media (max-width: 480px) {
                .header h1 { font-size: 1.8em; }
                .container { padding: 0 5px; }
                .demo-section { padding: 15px; }
                .action-buttons { grid-template-columns: 1fr; }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>ЁЯМ╛ Agriculture AI</h1>
                <div class="subtitle">ЁЯОд Whisper + я┐╜ Smart Assistant + ЁЯФК gTTS</div>
            </div>

            <div class="demo-info">
                <strong>ЁЯОп Enhanced Global Agriculture Assistant:</strong><br>
                ЁЯОд Whisper: Accurate speech recognition in any language<br>
                ЁЯдЦ Smart Assistant: COMPREHENSIVE support for ALL crops worldwide<br>
                ЁЯФК gTTS: High-quality Google TTS for Indian languages<br>
                ЁЯМ╛ Global Crops: Cereals, Legumes, Vegetables, Fruits, Cash Crops<br>
                тЪб <strong>ALL CROPS SUPPORTED! Clean answers in all languages!</strong>
            </div>

            <!-- Language Selection -->
            <div class="demo-section">
                <div class="section-title">1я╕ПтГг Select Language</div>
                <div class="option-grid">
                    <button class="option-button" onclick="selectLanguage('en')" id="lang-en">
                        ЁЯЗ║ЁЯЗ╕ English
                    </button>
                    <button class="option-button" onclick="selectLanguage('ta')" id="lang-ta">
                        ЁЯЗоЁЯЗ│ родрооро┐ро┤рпН (Tamil)
                    </button>
                    <button class="option-button" onclick="selectLanguage('te')" id="lang-te">
                        ЁЯЗоЁЯЗ│ р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)
                    </button>
                    <button class="option-button" onclick="selectLanguage('ml')" id="lang-ml">
                        ЁЯЗоЁЯЗ│ р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)
                    </button>
                </div>
            </div>

            <!-- User Profile -->
            <div class="demo-section">
                <div class="section-title">2я╕ПтГг Your Profile</div>
                <div class="option-grid">
                    <button class="option-button" onclick="selectProfile('farmer')" id="profile-farmer">
                        ЁЯСитАНЁЯМ╛ Farmer
                    </button>
                    <button class="option-button" onclick="selectProfile('expert')" id="profile-expert">
                        ЁЯФм Agriculture Expert
                    </button>
                    <button class="option-button" onclick="selectProfile('student')" id="profile-student">
                        ЁЯОУ Student/Learner
                    </button>
                </div>
            </div>

            <!-- Land Details -->
            <div class="demo-section">
                <div class="section-title">3я╕ПтГг Land Details</div>
                <div class="input-group">
                    <select id="cropType">
                        <option value="">Select Main Crop</option>
                        <option value="rice">ЁЯМ╛ Rice/Paddy</option>
                        <option value="wheat">ЁЯМ╛ Wheat</option>
                        <option value="corn">ЁЯМ╜ Corn/Maize</option>
                        <option value="barley">ЁЯМ╛ Barley</option>
                        <option value="oats">ЁЯМ╛ Oats</option>
                        <option value="soybeans">ЁЯлШ Soybeans</option>
                        <option value="chickpeas">ЁЯлШ Chickpeas</option>
                        <option value="lentils">ЁЯлШ Lentils</option>
                        <option value="tomatoes">ЁЯНЕ Tomatoes</option>
                        <option value="potatoes">ЁЯеФ Potatoes</option>
                        <option value="onions">ЁЯзЕ Onions</option>
                        <option value="carrots">ЁЯеХ Carrots</option>
                        <option value="apples">ЁЯНО Apples</option>
                        <option value="oranges">ЁЯНК Oranges</option>
                        <option value="bananas">ЁЯНМ Bananas</option>
                        <option value="grapes">ЁЯНЗ Grapes</option>
                        <option value="cotton">ЁЯМ┐ Cotton</option>
                        <option value="sugarcane">ЁЯОЛ Sugarcane</option>
                        <option value="coffee">тШХ Coffee</option>
                        <option value="tea">ЁЯН╡ Tea</option>
                        <option value="vegetables">ЁЯем Mixed Vegetables</option>
                        <option value="fruits">ЁЯНО Mixed Fruits</option>
                        <option value="other">ЁЯМ▒ Other Crop</option>
                    </select>
                    <select id="landSize">
                        <option value="">Select Land Size</option>
                        <option value="small">ЁЯПа Small (< 2 acres)</option>
                        <option value="medium">ЁЯПб Medium (2-10 acres)</option>
                        <option value="large">ЁЯПн Large (> 10 acres)</option>
                    </select>
                    <select id="soilType">
                        <option value="">Select Soil Type</option>
                        <option value="clay">ЁЯЯд Clay Soil</option>
                        <option value="sandy">ЁЯЯи Sandy Soil</option>
                        <option value="loamy">ЁЯЯл Loamy Soil</option>
                        <option value="other">тЭУ Not Sure</option>
                    </select>
                </div>
            </div>

            <!-- Quick Questions -->
            <div class="demo-section">
                <div class="section-title">4я╕ПтГг Quick Questions</div>
                <div class="quick-questions">
                    <button class="quick-question" onclick="askQuickQuestion('What is the best crop for my soil type?')">
                        ЁЯМ▒ What crop is best for my soil?
                    </button>
                    <button class="quick-question" onclick="askQuickQuestion('How much water does my crop need and when?')">
                        ЁЯТз Water requirements and timing
                    </button>
                    <button class="quick-question" onclick="askQuickQuestion('What fertilizer should I use for maximum yield?')">
                        ЁЯзк Best fertilizers for high yield
                    </button>
                    <button class="quick-question" onclick="askQuickQuestion('How to prevent and treat crop diseases?')">
                        ЁЯжа Disease prevention and treatment
                    </button>
                    <button class="quick-question" onclick="askQuickQuestion('When is the best time to plant my crop?')">
                        ЁЯУЕ Optimal planting seasons
                    </button>
                    <button class="quick-question" onclick="askQuickQuestion('How to control pests naturally?')">
                        ЁЯРЫ Natural pest control methods
                    </button>
                    <button class="quick-question" onclick="askQuickQuestion('What are the signs of nutrient deficiency?')">
                        ЁЯУК Nutrient deficiency symptoms
                    </button>
                    <button class="quick-question" onclick="askQuickQuestion('How to improve soil quality?')">
                        ЁЯМН Soil improvement techniques
                    </button>
                </div>
            </div>

            <!-- Custom Question -->
            <div class="demo-section">
                <div class="section-title">ЁЯУЭ Ask Your Question</div>
                <div class="input-section">
                    <textarea id="queryInput" placeholder="Type your agriculture question here..."></textarea>
                    <div class="action-buttons">
                        <button class="btn btn-primary" onclick="askAI()">ЁЯЪА Ask Smart Assistant</button>
                        <button class="btn btn-voice" onclick="startWhisperInput()">ЁЯОд Whisper</button>
                    </div>
                    <button class="btn btn-secondary" onclick="testTTS()" style="width: 100%; margin-top: 10px;">
                        ЁЯФК Test gTTS (Google TTS)
                    </button>
                    <button class="btn btn-secondary" onclick="testPhoneticTamil()" style="width: 100%; margin-top: 5px; background: #e53e3e;">
                        ЁЯОп Test Tamil Script (Native pronunciation)
                    </button>
                </div>
            </div>

            <!-- Status Bar -->
            <div class="status-bar" id="statusBar">
                ЁЯЯв Ready | Smart Assistant + Whisper + gTTS | Language: English
            </div>

            <!-- Response Area -->
            <div id="response" class="response">
                Welcome to Enhanced Global Agriculture AI! ЁЯМ╛<br><br>
                <strong>ЁЯМН COMPREHENSIVE CROP SUPPORT:</strong><br>
                я┐╜ Cereals: Rice, Wheat, Corn, Barley, Oats, Millet<br>
                ЁЯлШ Legumes: Soybeans, Chickpeas, Lentils, Beans, Peas<br>
                ЁЯем Vegetables: Tomatoes, Potatoes, Onions, Carrots, Cabbage<br>
                ЁЯНО Fruits: Apples, Oranges, Bananas, Grapes, Mango<br>
                ЁЯМ┐ Cash Crops: Cotton, Sugarcane, Coffee, Tea, Tobacco<br><br>
                <strong>я┐╜я╕П Agriculture-Only Assistant:</strong><br>
                тЬЕ Answers ALL agriculture-related questions<br>
                ЁЯМР Clean answers in ALL languages<br>
                ЁЯОд Whisper + ЁЯдЦ Smart RAG + ЁЯФК gTTS = Perfect combo!
            </div>
        </div>

        <script>
            let selectedLanguage = 'en';
            let selectedProfile = '';

            // Language selection
            function selectLanguage(lang) {
                selectedLanguage = lang;
                document.querySelectorAll('[id^="lang-"]').forEach(btn => btn.classList.remove('selected'));
                document.getElementById(`lang-${lang}`).classList.add('selected');
                updateStatusBar();
                console.log(`ЁЯМН Language selected: ${lang}`);
            }

            // Profile selection
            function selectProfile(profile) {
                selectedProfile = profile;
                document.querySelectorAll('[id^="profile-"]').forEach(btn => btn.classList.remove('selected'));
                document.getElementById(`profile-${profile}`).classList.add('selected');
                updateStatusBar();
                console.log(`ЁЯСд Profile selected: ${profile}`);
            }

            // Update status bar
            function updateStatusBar() {
                const langNames = {
                    'en': 'English',
                    'ta': 'Tamil',
                    'te': 'Telugu',
                    'ml': 'Malayalam'
                };
                
                const status = `ЁЯЯв Ready | Global Crop Assistant + Whisper + gTTS | Language: ${langNames[selectedLanguage]}`;
                document.getElementById('statusBar').textContent = status;
            }

            // Quick question handler
            function askQuickQuestion(question) {
                document.getElementById('queryInput').value = question;
                askAI();
            }

            // Get user details
            function getUserDetails() {
                return {
                    cropType: document.getElementById('cropType').value,
                    landSize: document.getElementById('landSize').value,
                    soilType: document.getElementById('soilType').value
                };
            }

            // MAIN FUNCTION - Ask AI with Smart Assistant + RAG
            async function askAI() {
                console.log('ЁЯЪА askAI function called with Enhanced Global Agriculture Assistant');
                
                const query = document.getElementById('queryInput').value;
                const responseDiv = document.getElementById('response');
                const details = getUserDetails();

                if (!query.trim()) {
                    alert('Please enter a question about agriculture or farming!');
                    return;
                }

                console.log(`ЁЯУЭ Query: "${query}" in language: ${selectedLanguage}`);
                responseDiv.innerHTML = '<div class="loading">ЁЯМ╛ Global Agriculture Assistant analyzing your question with RAG...</div>';

                try {
                    const requestData = {
                        query: query,
                        language: selectedLanguage,
                        mode: 'rag',
                        user_type: selectedProfile,
                        crop_type: details.cropType,
                        land_size: details.landSize,
                        soil_type: details.soilType
                    };

                    const response = await fetch('/query', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(requestData)
                    });

                    const data = await response.json();
                    console.log('тЬЕ Received Enhanced Agriculture Assistant response:', data);
                    
                    let responseText = `<strong>ЁЯМ╛ Global Agriculture Assistant Response:</strong>\\n\\n${data.answer}`;
                    
                    if (data.rag_sources && data.rag_sources.length > 0) {
                        responseText += `\\n\\nЁЯУЪ <strong>Knowledge Sources:</strong>\\n`;
                        data.rag_sources.forEach((source, idx) => {
                            responseText += `${idx + 1}. ${source.category.toUpperCase()}: ${source.item}\\n`;
                        });
                    }
                    
                    if (data.restriction) {
                        responseText += `\\n\\nЁЯЫбя╕П <strong>Note:</strong> This assistant only responds to agriculture-related questions.`;
                    }
                    
                    responseText += `\\n<hr style="border: 1px solid rgba(255,255,255,0.3); margin: 15px 0;">`;
                    responseText += `ЁЯУК Model: ${data.model} | тП▒я╕П Time: ${data.processing_time_ms}ms | ЁЯФЧ Sources: ${data.rag_sources ? data.rag_sources.length : 0}`;
                    
                    responseDiv.innerHTML = responseText;

                    // Use pyttsx3 TTS
                    if (data.answer) {
                        console.log(`ЁЯФК Starting pyttsx3 TTS: "${data.answer.substring(0, 50)}..."`);
                        await speakWithPyttsx3(data.answer, selectedLanguage);
                    }

                } catch (error) {
                    console.error('тЭМ Error:', error);
                    responseDiv.innerHTML = `тЭМ Error: ${error.message}`;
                }
            }

            // Enhanced pyttsx3 TTS function
            async function speakWithPyttsx3(text, language) {
                console.log(`ЁЯФК Using pyttsx3 TTS for ${language}`);
                
                try {
                    const ttsResponse = await fetch('/generate-tts', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            text: text,
                            language: language
                        })
                    });
                    
                    const ttsData = await ttsResponse.json();
                    
                    if (ttsData.success && ttsData.audio_base64) {
                        console.log(`тЬЕ Using ${ttsData.service} (${ttsData.voice})`);
                        
                        // Create audio element and play (supports both WAV and MP3)
                        const audio = new Audio();
                        const audioFormat = ttsData.audio_format || 'wav';
                        audio.src = `data:audio/${audioFormat};base64,${ttsData.audio_base64}`;
                        
                        return new Promise((resolve) => {
                            audio.onended = () => {
                                console.log('тЬЕ pyttsx3 TTS completed successfully');
                                resolve();
                            };
                            
                            audio.onerror = (error) => {
                                console.error('тЭМ Audio playback error:', error);
                                resolve();
                            };
                            
                            audio.play().catch(error => {
                                console.error('тЭМ Audio play error:', error);
                                resolve();
                            });
                        });
                    } else {
                        console.log('ЁЯФД pyttsx3 not available, no TTS');
                    }
                    
                } catch (error) {
                    console.error('тЭМ TTS request failed:', error);
                }
            }

            // Whisper speech input function
            async function startWhisperInput() {
                console.log('ЁЯОд Starting Whisper input...');
                
                const responseDiv = document.getElementById('response');
                responseDiv.innerHTML = 'ЁЯОд Listening with Whisper... Speak your agriculture question!';
                
                try {
                    // Use Web API for audio capture
                    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                    const mediaRecorder = new MediaRecorder(stream);
                    const audioChunks = [];
                    
                    mediaRecorder.ondataavailable = (event) => {
                        audioChunks.push(event.data);
                    };
                    
                    mediaRecorder.onstop = async () => {
                        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                        const arrayBuffer = await audioBlob.arrayBuffer();
                        const base64Audio = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));
                        
                        console.log('ЁЯОд Audio captured, sending to Whisper...');
                        responseDiv.innerHTML = 'ЁЯОд Processing with Whisper...';
                        
                        try {
                            const response = await fetch('/whisper-transcribe', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    audio_data: base64Audio,
                                    language: selectedLanguage
                                })
                            });
                            
                            const data = await response.json();
                            
                            if (data.success) {
                                console.log(`тЬЕ Whisper transcription: "${data.transcribed_text}"`);
                                document.getElementById('queryInput').value = data.transcribed_text;
                                responseDiv.innerHTML = `ЁЯОд Whisper heard: "${data.transcribed_text}"\\n\\nClick "Ask Smart Assistant" to get an answer!`;
                            } else {
                                console.error('тЭМ Whisper failed:', data.error);
                                responseDiv.innerHTML = `тЭМ Whisper error: ${data.error}`;
                            }
                            
                        } catch (error) {
                            console.error('тЭМ Whisper request failed:', error);
                            responseDiv.innerHTML = `тЭМ Whisper request failed: ${error.message}`;
                        }
                        
                        // Stop all tracks
                        stream.getTracks().forEach(track => track.stop());
                    };
                    
                    // Record for 5 seconds
                    mediaRecorder.start();
                    setTimeout(() => {
                        if (mediaRecorder.state === 'recording') {
                            mediaRecorder.stop();
                        }
                    }, 5000);
                    
                } catch (error) {
                    console.error('тЭМ Microphone access failed:', error);
                    responseDiv.innerHTML = `тЭМ Microphone access failed: ${error.message}`;
                }
            }

            // Allow Enter key to submit
            document.getElementById('queryInput').addEventListener('keypress', function(event) {
                if (event.key === 'Enter') {
                    askAI();
                }
            });

            console.log('ЁЯЪА Enhanced Global Agriculture AI ready with comprehensive crop support!');
        </script>
    </body>
    </html>
    """

@app.post("/query")
async def query_agriculture(request: QueryRequest):
    start_time = time.time()
    
    try:
        logger.info(f"ЁЯМ╛ Smart RAG Query: {request.query[:50]}... | Language: {request.language} | Profile: {request.user_type}")
        
        # Get RAG context for agriculture query (removed restriction filter)
        explicit_crop = detect_explicit_crop(request.query, request.language)
        rag_context = get_rag_context(
            request.query,
            request.language,
            top_k=3,
            user_crop=explicit_crop or request.crop_type,
            user_soil=request.soil_type
        )
        
        # Enhanced Smart Agriculture Assistant with comprehensive crop knowledge
        def generate_smart_agriculture_answer(query, language, rag_context, user_context):
            """Generate practical agriculture answers with comprehensive crop support"""
            
            # Build comprehensive answer from RAG context
            if rag_context:
                best_match = rag_context[0]
                answer = best_match['content']
                
                # Add specific advice based on user context and crop type
                crop_type = user_context.get('crop_type', '')
                soil_type = user_context.get('soil_type', '')
                land_size = user_context.get('land_size', '')
                
                # Soil-specific advice
                if soil_type == 'clay':
                    if language == 'ta':
                        answer += " роХро│ро┐роорогрпН роорогрпНрогрпБроХрпНроХрпБ: роиро▓рпНро▓ ро╡роЯро┐роХро╛ро▓рпН роЕроорпИрокрпНрокрпБ роЕро╡роЪро┐ропроорпН. роХро░ро┐роорокрпН рокрпКро░рпБроЯрпНроХро│рпИроЪрпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН."
                    elif language == 'te':
                        answer += " р░ор░Яр▒Нр░Яр░┐ р░ор░Яр▒Нр░Яр░┐р░Хр░┐: р░ор░Вр░Ър░┐ р░бр▒Нр░░р▒Ир░ир▒Зр░Ьр▒Н р░╡р▒Нр░пр░╡р░╕р▒Нр░е р░Ер░╡р░╕р░░р░В. р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░кр░жр░╛р░░р▒Нр░ер░╛р░▓р░ир▒Б р░Хр░▓р░кр░Вр░бр░┐."
                    elif language == 'ml':
                        answer += " р┤Хр┤│р┤┐р┤ор┤гр╡Нр┤гр┤┐р┤ир╡Н: р┤ир┤▓р╡Нр┤▓ р┤бр╡Нр┤░р╡Жр┤пр┤┐р┤ир╡Зр┤Ьр╡Н р┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤В р┤Жр┤╡р┤╢р╡Нр┤пр┤В. р┤Ьр╡Ир┤╡р┤╡р┤╕р╡Нр┤др╡Бр┤Хр╡Нр┤Хр╡╛ р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х."
                    elif language == 'hi':
                        answer += " рдЪрд┐рдХрдиреА рдорд┐рдЯреНрдЯреА рдХреЗ рд▓рд┐рдП: рдЕрдЪреНрдЫреА рдЬрд▓ рдирд┐рдХрд╛рд╕реА рд╡реНрдпрд╡рд╕реНрдерд╛ рдЬрд░реВрд░реАред рдЬреИрд╡рд┐рдХ рдкрджрд╛рд░реНрде рдорд┐рд▓рд╛рдПрдВред"
                    else:
                        answer += " For clay soil: Good drainage system essential. Add organic matter to improve structure."
                
                elif soil_type == 'sandy':
                    if language == 'ta':
                        answer += " роорогро▓рпН роорогрпНрогрпБроХрпНроХрпБ: роЕроЯро┐роХрпНроХроЯро┐ роирпАро░рпНрокрпНрокро╛роЪройроорпН родрпЗро╡рпИред роХроорпНрокрпЛро╕рпНроЯрпН роЪрпЗро░рпНродрпНродрпБ роКроЯрпНроЯроЪрпНроЪродрпНродрпБ родроХрпНроХро╡рпИроХрпНроХро╡рпБроорпН."
                    elif language == 'te':
                        answer += " р░Зр░╕р▒Бр░Х р░ор░Яр▒Нр░Яр░┐р░Хр░┐: р░др░░р░Ър▒Бр░Чр░╛ р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓ р░Ер░╡р░╕р░░р░В. р░Хр░Вр░кр▒Лр░╕р▒Нр░Яр▒Н р░Ър▒Зр░░рпНр░Ър░┐ р░кр▒Лр░╖р░Хр░╛р░▓р░ир▒Б р░ир░┐р░▓р▒Бр░кр▒Бр░Хр▒Лр░Вр░бр░┐."
                    elif language == 'ml':
                        answer += " р┤ор┤гр╡╜р┤ор┤гр╡Нр┤гр┤┐р┤ир╡Н: р┤Зр┤Яр┤пр╡Нр┤Хр╡Нр┤Хр┤┐р┤Яр╡Ж р┤ир┤ир┤пр╡Нр┤Хр╡Нр┤Хр┤гр┤В. р┤Хр┤ор╡Нр┤кр╡Лр┤╕р╡Нр┤▒р╡Нр┤▒р╡Н р┤Ър╡Зр╡╝р┤др╡Нр┤др╡Н р┤кр╡Лр┤╖р┤Хр┤Щр╡Нр┤Щр╡╛ р┤ир┤┐р┤▓р┤ир┤┐р╡╝р┤др╡Нр┤др╡Бр┤Х."
                    elif language == 'hi':
                        answer += " рд░реЗрддреАрд▓реА рдорд┐рдЯреНрдЯреА рдХреЗ рд▓рд┐рдП: рдмрд╛рд░-рдмрд╛рд░ рд╕рд┐рдВрдЪрд╛рдИ рдЪрд╛рд╣рд┐рдПред рдХрдВрдкреЛрд╕реНрдЯ рдорд┐рд▓рд╛рдХрд░ рдкреЛрд╖рдХ рддрддреНрд╡ рдмрдирд╛рдП рд░рдЦреЗрдВред"
                    else:
                        answer += " For sandy soil: Frequent irrigation needed. Add compost to retain nutrients."
                
                # Land size specific advice
                if land_size == 'small':
                    if language == 'ta':
                        answer += " роЪро┐ро▒ро┐роп роиро┐ро▓родрпНродро┐ро▒рпНроХрпБ: роЪрпКроЯрпНроЯрпБ роирпАро░рпНрокрпНрокро╛роЪройроорпН, роЪрпЖроЩрпНроХрпБродрпНродрпБ ро╡ро┐ро╡роЪро╛ропроорпН, роорогрпНрогро┐ройрпН рооро▓рпНроЪрпНроЪро┐роЩрпН рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ."
                    elif language == 'te':
                        answer += " р░Ър░┐р░ир▒Нр░и р░нр▒Вр░ор░┐р░Хр░┐: р░бр▒Нр░░р░┐р░кр▒Н р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓, р░ир░┐р░▓р▒Бр░╡р▒Б р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В, р░ор░Яр▒Нр░Яр░┐ р░Хр░╡р░░р░┐р░Вр░Чр▒Н р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐."
                    elif language == 'ml':
                        answer += " р┤Ър╡Жр┤▒р┤┐роп р┤нр╡Вр┤ор┤┐р┤Хр╡Нр┤Хр╡Н: р┤бр╡Нр┤░р┤┐р┤кр╡Нр┤кр╡Н р┤Ьр┤▓р┤╕р╡Зр┤Ър┤ир┤В, р┤▓р┤Вр┤мр┤ор┤╛р┤п р┤Хр╡Гр┤╖р┤┐, р┤ор┤гр╡Нр┤гр╡Н р┤ор╡╛р┤Ър╡Нр┤Ър┤┐р┤Вр┤Чр╡Н р┤╢р╡Бр┤кр┤╛р╡╝р┤╢ р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б."
                    elif language == 'hi':
                        answer += " рдЫреЛрдЯреА рдЬрдореАрди рдХреЗ рд▓рд┐рдП: рдбреНрд░рд┐рдк рд╕рд┐рдВрдЪрд╛рдИ, рдКрд░реНрдзреНрд╡рд╛рдзрд░ рдЦреЗрддреА, рдорд┐рдЯреНрдЯреА рдорд▓реНрдЪрд┐рдВрдЧ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ред"
                    else:
                        answer += " For small land: Drip irrigation, vertical farming, soil mulching recommended."
                
                # Seasonal advice
                import datetime
                current_month = datetime.datetime.now().month
                
                if 6 <= current_month <= 10:  # Monsoon/Kharif season
                    if language == 'ta':
                        answer += " родро▒рпНрокрпЛродрпБ роХро░рпАрокрпН рокро░рпБро╡роорпН. роЕро░ро┐роЪро┐, рокро░рпБродрпНродро┐, роЪрпЛро│роорпН, роХро░рпБроорпНрокрпБ роЖроХро┐ропро╡ро▒рпНро▒рпБроХрпНроХрпБ роПро▒рпНро▒ роХро╛ро▓роорпН."
                    elif language == 'te':
                        answer += " р░кр▒Нр░░р░╕р▒Нр░др▒Бр░др░В р░Цр░░р▒Ар░лр▒Н р░╕р▒Ар░Ьр░ир▒Н. р░╡р░░р░┐, р░кр░др▒Нр░др░┐, р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и, р░Ър▒Жр░░р░Хр▒Бр░Хр▒Б р░Ер░ир▒Бр░╡р▒Ир░и р░╕р░ор░пр░В."
                    elif language == 'ml':
                        answer += " р┤Зр┤кр╡Нр┤кр╡Лр╡╛ р┤Цр┤░р╡Ар┤лр╡Н р┤╕р╡Ар┤╕р╡║. р┤Ер┤░р┤┐, р┤кр┤░р╡Бр┤др╡Нр┤др┤┐, р┤Ър╡Лр┤│р┤В, р┤Хр┤░р┤┐р┤ор╡Нр┤кр╡Н р┤Ор┤ир╡Нр┤ир┤┐р┤╡р┤пр╡Нр┤Хр╡Нр┤Хр╡Н р┤Ер┤ир╡Бр┤пр╡Лр┤Ьр╡Нр┤пр┤ор┤╛р┤п р┤╕р┤ор┤пр┤В."
                    elif language == 'hi':
                        answer += " рдЕрднреА рдЦрд░реАрдл рдореМрд╕рдоред рдзрд╛рди, рдХрдкрд╛рд╕, рдордХреНрдХрд╛, рдЧрдиреНрдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╕рдордпред"
                    else:
                        answer += " Current Kharif season. Suitable time for rice, cotton, corn, sugarcane."
                
                elif 11 <= current_month <= 4:  # Winter/Rabi season
                    if language == 'ta':
                        answer += " родро▒рпНрокрпЛродрпБ ро░рокро┐ рокро░рпБро╡роорпН. роХрпЛродрпБроорпИ, рокро╛ро░рпНро▓ро┐, роХроЯрпБроХрпБ, рокроЯрпНроЯро╛рогро┐ роЖроХро┐ропро╡ро▒рпНро▒рпБроХрпНроХрпБ роПро▒рпНро▒ роХро╛ро▓роорпН."
                    elif language == 'te':
                        answer += " р░кр▒Нр░░р░╕р▒Нр░др▒Бр░др░В р░░р░мр▒А р░╕р▒Ар░Ьр░ир▒Н. р░Чр▒Лр░зр▒Бр░о, р░мр░╛р░░р▒Нр░▓р▒А, р░Жр░╡р░╛р░▓р▒Б, р░мр░ар░╛р░ир▒Бр░▓ р░Хр▒Лр░╕р░В р░Ер░ир▒Бр░╡р▒Ир░и р░╕р░ор░пр░В."
                    elif language == 'ml':
                        answer += " р┤Зр┤кр╡Нр┤кр╡Лр╡╛ р┤▒р┤мр╡А р┤╕р╡Ар┤╕р╡║. р┤Чр╡Лр┤др┤ор╡Нр┤кр╡Н, р┤мр┤╛р╡╝р┤▓р┤┐, р┤Хр┤Яр╡Бр┤Хр╡Н, р┤кр┤пр╡╝ р┤Ор┤ир╡Нр┤ир┤┐р┤╡р┤пр╡Нр┤Хр╡Нр┤Хр╡Н р┤Ер┤ир╡Бр┤пр╡Лр┤Ьр╡Нр┤пр┤ор┤╛р┤п р┤╕р┤ор┤пр┤В."
                    elif language == 'hi':
                        answer += " рдЕрднреА рд░рдмреА рдореМрд╕рдоред рдЧреЗрд╣реВрдВ, рдЬреМ, рд╕рд░рд╕реЛрдВ, рдордЯрд░ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╕рдордпред"
                    else:
                        answer += " Current Rabi season. Suitable time for wheat, barley, mustard, peas."
                
                return answer
            
            # Enhanced fallback responses with comprehensive crop support
            practical_fallbacks = {
                'en': {
                    'general': "For general farming: 1) Test soil pH (6.0-7.5 optimal), 2) Use organic compost, 3) Follow proper irrigation schedule, 4) Monitor for pests. I can help with any crop - cereals (rice, wheat, corn), legumes (soybeans, chickpeas), vegetables (tomatoes, potatoes), fruits (apples, oranges), or cash crops (cotton, sugarcane).",
                    'fertilizer': "Balanced NPK fertilizer guide: Most crops need 40kg Urea + 25kg DAP + 15kg MOP per acre. Split application - half at sowing, rest after 30-45 days. Organic options: compost, vermicompost, green manure.",
                    'pest': "Integrated pest management: 1) Neem oil spray (5ml/liter), 2) Remove affected parts, 3) Yellow sticky traps, 4) Beneficial insects, 5) Crop rotation. Specific treatments vary by crop and pest type.",
                    'disease': "Disease prevention: 1) Proper spacing for air circulation, 2) Avoid overhead watering, 3) Remove infected parts immediately, 4) Copper-based fungicides for fungal issues, 5) Resistant varieties when available."
                },
                'ta': {
                    'general': "рокрпКродрпБро╡ро╛рой ро╡рпЗро│ро╛рогрпНроорпИроХрпНроХрпБ: 1) роорогрпН pH роЪрпЛродройрпИ (6.0-7.5 роЪро┐ро▒роирпНродродрпБ), 2) роХро░ро┐роо роХроорпНрокрпЛро╕рпНроЯрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН, 3) роЪро░ро┐ропро╛рой роирпАро░рпНрокрпНрокро╛роЪройроорпН, 4) рокрпВроЪрпНроЪро┐роХро│рпН роХрогрпНроХро╛рогро┐рокрпНрокрпБ. роиро╛ройрпН роЕройрпИродрпНродрпБ рокропро┐ро░рпНроХро│рпБроХрпНроХрпБроорпН роЙродро╡ роорпБроЯро┐ропрпБроорпН - родро╛ройро┐ропроЩрпНроХро│рпН, рокро░рпБрокрпНрокрпБ ро╡роХрпИроХро│рпН, роХро╛ропрпНроХро▒ро┐роХро│рпН, рокро┤роЩрпНроХро│рпН, рокрогрокрпНрокропро┐ро░рпНроХро│рпН.",
                    'fertilizer': "роЪроороЪрпНроЪрпАро░рпН NPK роЙро░роорпН: рокрпЖро░рпБроорпНрокро╛ро▓ро╛рой рокропро┐ро░рпНроХро│рпБроХрпНроХрпБ роПроХрпНроХро░рпБроХрпНроХрпБ 40роХро┐ро▓рпЛ ропрпВро░ро┐ропро╛ + 25роХро┐ро▓рпЛ DAP + 15роХро┐ро▓рпЛ MOP. рокро┐ро░ро┐родрпНрод рокропройрпНрокро╛роЯрпБ - рокро╛родро┐ ро╡ро┐родрпИроХрпНроХрпБроорпНрокрпЛродрпБ, роорпАродроорпН 30-45 роиро╛роЯрпНроХро│рпБроХрпНроХрпБрокрпН рокро┐ро▒роХрпБ.",
                    'pest': "роТро░рпБроЩрпНроХро┐рогрпИроирпНрод рокрпВроЪрпНроЪро┐ роорпЗро▓ро╛рогрпНроорпИ: 1) ро╡рпЗрокрпНрок роОрогрпНрогрпЖропрпН родрпЖро│ро┐рокрпНрокрпБ, 2) рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ рокроХрпБродро┐роХро│рпИ роЕроХро▒рпНро▒ро╡рпБроорпН, 3) роороЮрпНроЪро│рпН роТроЯрпНроЯрпБроорпН рокрпКро▒ро┐роХро│рпН, 4) рокропройрпНрокроЯрпИ рокрпВроЪрпНроЪро┐роХро│рпН, 5) рокропро┐ро░рпН роЪрпБро┤ро▒рпНроЪро┐.",
                    'disease': "роирпЛропрпН родроЯрпБрокрпНрокрпБ: 1) роХро╛ро▒рпНро▒рпЛроЯрпНроЯродрпНродро┐ро▒рпНроХрпБ роЪро░ро┐ропро╛рой роЗроЯрпИро╡рпЖро│ро┐, 2) роЗро▓рпИроХро│ро┐ро▓рпН роирпЗро░роЯро┐ роирпАро░рпН родрпЖро│ро┐рокрпНрокрпБ родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН, 3) рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ рокроХрпБродро┐роХро│рпИ роЙроЯройрпЗ роЕроХро▒рпНро▒ро╡рпБроорпН."
                },
                'te': {
                    'general': "р░╕р░╛р░зр░╛р░░р░г р░╡р▒Нр░пр░╡р░╕р░╛р░пр░╛р░ир░┐р░Хр░┐: 1) р░ор░Яр▒Нр░Яр░┐ pH р░кр░░р▒Ар░Хр▒Нр░╖ (6.0-7.5 р░Йр░др▒Нр░др░ор░В), 2) р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░Хр░Вр░кр▒Лр░╕р▒Нр░Яр▒Н р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░Вр░бр░┐, 3) р░╕р░░р▒Ир░и р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓, 4) р░Хр▒Ар░Яр░Хр░╛р░▓ р░кр░░р▒Нр░пр░╡р▒Зр░Хр▒Нр░╖р░г. р░ир▒Зр░ир▒Б р░Ер░ир▒Нр░ир░┐ р░кр░Вр░Яр░▓р░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б.",
                    'fertilizer': "р░╕р░ор░др▒Бр░▓р▒Нр░п NPK р░Ор░░р▒Бр░╡р▒Б: р░Ър░╛р░▓р░╛ р░кр░Вр░Яр░▓р░Хр▒Б р░Ор░Хр░░р░Хр▒Б 40р░Хр░┐р░▓р▒Л р░пр▒Вр░░р░┐р░пр░╛ + 25р░Хр░┐р░▓р▒Л DAP + 15р░Хр░┐р░▓р▒Л MOP. р░╡р░┐р░нр░Ьр░┐р░д р░Ер░кр▒Нр░▓р░┐р░Хр▒Зр░╖р░ир▒Н - р░╕р░Чр░В р░╡р░┐р░др▒Нр░др░ир░╛р░▓р▒Л, р░ор░┐р░Чр░┐р░▓р░┐р░Вр░жр░┐ 30-45 р░░р▒Лр░Ьр▒Бр░▓ р░др░░р▒Нр░╡р░╛р░д.",
                    'pest': "р░╕р░ор░Чр▒Нр░░ р░Хр▒Ар░Яр░Х р░ир░┐р░░р▒Нр░╡р░╣р░г: 1) р░╡р▒Зр░к р░ир▒Вр░ир▒Ж р░╕р▒Нр░кр▒Нр░░р▒З, 2) р░кр▒Нр░░р░нр░╛р░╡р░┐р░д р░нр░╛р░Чр░╛р░▓р░ир▒Б р░др▒Кр░▓р░Чр░┐р░Вр░Ър░Вр░бр░┐, 3) р░кр░╕р▒Бр░кр▒Б р░Ьр░┐р░Чр▒Бр░░р▒Б р░Йр░Ър▒Нр░Ър▒Бр░▓р▒Б, 4) р░кр▒Нр░░р░пр▒Лр░Ьр░ир░Хр░░р░ор▒Ир░и р░Хр▒Ар░Яр░Хр░╛р░▓р▒Б.",
                    'disease': "р░╡р▒Нр░пр░╛р░зр░┐ р░ир░┐р░╡р░╛р░░р░г: 1) р░Чр░╛р░▓р░┐ р░кр▒Нр░░р░╕р░░р░г р░Хр▒Лр░╕р░В р░╕р░░р▒Ир░и р░Ер░Вр░др░░р░В, 2) р░кр▒И р░ир▒Бр░Вр░бр░┐ р░ир▒Ар░░р▒Б р░кр▒Лр░пр░бр░В р░ор░╛р░ир▒Бр░Хр▒Лр░Вр░бр░┐, 3) р░╕р▒Лр░Хр░┐р░и р░нр░╛р░Чр░╛р░▓р░ир▒Б р░╡р▒Жр░Вр░Яр░ир▒З р░др▒Кр░▓р░Чр░┐р░Вр░Ър░Вр░бр░┐."
                },
                'ml': {
                    'general': "р┤кр╡Кр┤др╡Бр┤╡р┤╛р┤п р┤Хр╡Гр┤╖р┤┐р┤Хр╡Нр┤Хр╡Н: 1) р┤ор┤гр╡Нр┤гр┤┐р┤ир╡Нр┤▒р╡Ж pH р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤и (6.0-7.5 р┤Йр┤др╡Нр┤др┤ор┤В), 2) р┤Ьр╡Ир┤╡ р┤Хр┤ор╡Нр┤кр╡Лр┤╕р╡Нр┤▒р╡Нр┤▒р╡Н р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х, 3) р┤╢р┤░р┤┐р┤пр┤╛р┤п р┤Ьр┤▓р┤╕р╡Зр┤Ър┤ир┤В, 4) р┤Хр╡Ар┤Яр┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤ир┤┐р┤░р╡Ар┤Хр╡Нр┤╖р┤гр┤В. р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤Ор┤▓р╡Нр┤▓р┤╛ р┤╡р┤┐р┤│р┤Хр╡╛р┤Хр╡Нр┤Хр╡Бр┤В р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Хр┤┤р┤┐р┤пр╡Бр┤В.",
                    'fertilizer': "р┤╕р┤ор┤др╡Бр┤▓р┤┐р┤др┤ор┤╛р┤п NPK р┤╡р┤│р┤В: р┤ор┤┐р┤Хр╡Нр┤Х р┤╡р┤┐р┤│р┤Хр╡╛р┤Хр╡Нр┤Хр╡Бр┤В р┤Пр┤Хр╡Нр┤Хр┤▒р┤┐р┤ир╡Н 40р┤Хр┤┐р┤▓р╡Л р┤пр╡Вр┤▒р┤┐р┤п + 25р┤Хр┤┐р┤▓р╡Л DAP + 15р┤Хр┤┐р┤▓р╡Л MOP. р┤╡р┤┐р┤нр┤Ьр┤┐р┤д р┤кр╡Нр┤░р┤пр╡Лр┤Чр┤В - р┤кр┤Хр╡Бр┤др┤┐ р┤╡р┤┐р┤др┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤ор╡Нр┤кр╡Лр╡╛, р┤мр┤╛р┤Хр╡Нр┤Хр┤┐ 30-45 р┤жр┤┐р┤╡р┤╕р┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н р┤╢р╡Зр┤╖р┤В.",
                    'pest': "р┤╕р┤Вр┤пр╡Лр┤Ьр┤┐р┤д р┤Хр╡Ар┤Я р┤кр┤░р┤┐р┤кр┤╛р┤▓р┤ир┤В: 1) р┤╡р╡Зр┤кр╡Нр┤кр╡Жр┤гр╡Нр┤г р┤╕р╡Нр┤кр╡Нр┤░р╡З, 2) р┤мр┤╛р┤зр┤┐р┤д р┤нр┤╛р┤Чр┤Щр╡Нр┤Щр╡╛ р┤ир╡Ар┤Хр╡Нр┤Хр┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х, 3) р┤ор┤Юр╡Нр┤Ю р┤Тр┤Яр╡Нр┤Яр╡Бр┤ир╡Нр┤и р┤Хр╡Жр┤гр┤┐р┤Хр╡╛.",
                    'disease': "р┤░р╡Лр┤Ч р┤кр╡Нр┤░р┤др┤┐р┤░р╡Лр┤зр┤В: 1) р┤╡р┤╛р┤пр╡Б р┤╕р┤Юр╡Нр┤Ър┤╛р┤░р┤др╡Нр┤др┤┐р┤ир╡Н р┤╢р┤░р┤┐р┤пр┤╛р┤п р┤Ер┤Хр┤▓р┤В, 2) р┤ор╡Бр┤Хр┤│р┤┐р╡╜ р┤ир┤┐р┤ир╡Нр┤ир╡Н р┤╡р╡Жр┤│р╡Нр┤│р┤В р┤Тр┤┤р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир┤др╡Н р┤Тр┤┤р┤┐р┤╡р┤╛р┤Хр╡Нр┤Хр╡Бр┤Х, 3) р┤░р╡Лр┤Чр┤мр┤╛р┤зр┤┐р┤д р┤нр┤╛р┤Чр┤Щр╡Нр┤Щр╡╛ р┤Йр┤Яр┤ир╡Ж р┤ир╡Ар┤Хр╡Нр┤Хр┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х."
                },
                'hi': {
                    'general': "рд╕рд╛рдорд╛рдиреНрдп рдХреГрд╖рд┐ рдХреЗ рд▓рд┐рдП: 1) рдорд┐рдЯреНрдЯреА pH рдЬрд╛рдВрдЪ (6.0-7.5 рдЖрджрд░реНрд╢), 2) рдЬреИрд╡рд┐рдХ рдЦрд╛рдж рдХрд╛ рдЙрдкрдпреЛрдЧ, 3) рдЙрдЪрд┐рдд рд╕рд┐рдВрдЪрд╛рдИ, 4) рдХреАрдЯ рдирд┐рдЧрд░рд╛рдиреАред рдореИрдВ рд╕рднреА рдлрд╕рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред",
                    'fertilizer': "рд╕рдВрддреБрд▓рд┐рдд NPK рдЙрд░реНрд╡рд░рдХ: рдЕрдзрд┐рдХрд╛рдВрд╢ рдлрд╕рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рдкреНрд░рддрд┐ рдПрдХрдбрд╝ 40рдХрд┐рд▓реЛ рдпреВрд░рд┐рдпрд╛ + 25рдХрд┐рд▓реЛ DAP + 15рдХрд┐рд▓реЛ MOPред рд╡рд┐рднрд╛рдЬрд┐рдд рдЙрдкрдпреЛрдЧ - рдЖрдзрд╛ рдмреБрдЖрдИ рдХреЗ рд╕рдордп, рдмрд╛рдХреА 30-45 рджрд┐рди рдмрд╛рджред",
                    'pest': "рдПрдХреАрдХреГрдд рдХреАрдЯ рдкреНрд░рдмрдВрдзрди: 1) рдиреАрдо рддреЗрд▓ рд╕реНрдкреНрд░реЗ, 2) рдкреНрд░рднрд╛рд╡рд┐рдд рднрд╛рдЧреЛрдВ рдХреЛ рд╣рдЯрд╛рдПрдВ, 3) рдкреАрд▓реЗ рдЪрд┐рдкрдЪрд┐рдкреЗ рдЬрд╛рд▓, 4) рд▓рд╛рднрдХрд╛рд░реА рдХреАрдбрд╝реЗред",
                    'disease': "рд░реЛрдЧ рд░реЛрдХрдерд╛рдо: 1) рд╣рд╡рд╛ рдХреЗ рд╕рдВрдЪрд╛рд░ рдХреЗ рд▓рд┐рдП рдЙрдЪрд┐рдд рджреВрд░реА, 2) рдКрдкрд░ рд╕реЗ рдкрд╛рдиреА рджреЗрдирд╛ рдмрдЪреЗрдВ, 3) рд╕рдВрдХреНрд░рдорд┐рдд рднрд╛рдЧреЛрдВ рдХреЛ рддреБрд░рдВрдд рд╣рдЯрд╛рдПрдВред"
                }
            }
            
            # Determine response category based on query analysis
            query_lower = query.lower()
            if any(word in query_lower for word in ['fertilizer', 'urea', 'dap', 'nutrients', 'ржЙрж░рдорзН', 'р░Ор░░р▒Бр░╡р▒Бр░▓р▒Б', 'р┤╡р┤│р┤В', 'рдЦрд╛рдж']):
                category = 'fertilizer'
            elif any(word in query_lower for word in ['pest', 'insect', 'bug', 'spray', 'ржкрзВржЪрзНржЪрж┐', 'р░Хр▒Ар░Яр░Хр░╛р░▓р▒Б', 'р┤Хр╡Ар┤Яр┤В', 'рдХреАрдЯ']):
                category = 'pest'
            elif any(word in query_lower for word in ['disease', 'fungus', 'rot', 'blight', 'ржирзЛржпрж╝', 'р░╡р▒Нр░пр░╛р░зр░┐', 'р┤░р╡Лр┤Чр┤В', 'рдмреАрдорд╛рд░реА']):
                category = 'disease'
            else:
                category = 'general'
            
            return practical_fallbacks.get(language, practical_fallbacks['en']).get(category, practical_fallbacks['en']['general'])
        
        # Generate comprehensive answer
        user_context = {
            "profile": request.user_type,
            "crop": request.crop_type,
            "land_size": request.land_size,
            "soil_type": request.soil_type
        }
        
        answer = generate_smart_agriculture_answer(
            request.query, 
            request.language, 
            rag_context, 
            user_context
        )
        
        processing_time = (time.time() - start_time) * 1000
        
        return {
            "answer": answer,
            "confidence": 0.95,
            "processing_time_ms": round(processing_time),
            "language": request.language,
            "mode": "comprehensive_agriculture_assistant",
            "model": "Enhanced Smart RAG with Global Crop Support",
            "rag_sources": [{"category": ctx['category'], "item": ctx['item'], "similarity": ctx['similarity']} for ctx in rag_context],
            "user_context": user_context,
            "supported_crops": "All global crops supported including cereals, legumes, vegetables, fruits, cash crops"
        }
        
    except Exception as e:
        logger.error(f"тЭМ Error: {str(e)}")
        
        # Enhanced fallback with agriculture focus
        practical_fallback = {
            'en': "I'm your comprehensive agriculture assistant for ALL crops worldwide. Ask me about: Cereals (rice, wheat, corn, barley), Legumes (soybeans, chickpeas, lentils), Vegetables (tomatoes, potatoes, onions), Fruits (apples, oranges, bananas), Cash crops (cotton, sugarcane, coffee). I provide soil, pest, fertilizer, and growing advice!",
            'ta': "роиро╛ройрпН роЙро▓роХро│ро╛ро╡ро┐роп роЕройрпИродрпНродрпБ рокропро┐ро░рпНроХро│рпБроХрпНроХрпБроорпН ро╡ро┐ро░ро┐ро╡ро╛рой ро╡рпЗро│ро╛рогрпН роЙродро╡ро┐ропро╛ро│ро░рпН. роОройрпНройро┐роЯроорпН роХрпЗро│рпБроЩрпНроХро│рпН: родро╛ройро┐ропроЩрпНроХро│рпН, рокро░рпБрокрпНрокрпБ ро╡роХрпИроХро│рпН, роХро╛ропрпНроХро▒ро┐роХро│рпН, рокро┤роЩрпНроХро│рпН, рокрогрокрпНрокропро┐ро░рпНроХро│рпН рокро▒рпНро▒ро┐.",
            'te': "р░ир▒Зр░ир▒Б р░кр▒Нр░░р░кр░Вр░Ър░╡р▒Нр░пр░╛р░кр▒Нр░д р░Ер░ир▒Нр░ир░┐ р░кр░Вр░Яр░▓р░Хр▒Б р░╕р░ор░Чр▒Нр░░ р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр░ир▒Б. р░ир░ир▒Нр░ир▒Б р░Ер░бр░Чр░Вр░бр░┐: р░зр░╛р░ир▒Нр░пр░╛р░▓р▒Б, р░Чр░┐р░Вр░Ьр░▓р▒Б, р░Хр▒Вр░░р░Чр░╛р░пр░▓р▒Б, р░кр░Вр░бр▒Нр░▓р▒Б, р░╡р░╛р░гр░┐р░Ьр▒Нр░п р░кр░Вр░Яр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐.",
            'ml': "р┤Юр┤╛р╡╗ р┤▓р╡Лр┤Хр┤ор╡Жр┤ор╡Нр┤кр┤╛р┤Яр╡Бр┤ор╡Бр┤│р╡Нр┤│ р┤Ор┤▓р╡Нр┤▓р┤╛ р┤╡р┤┐р┤│р┤Хр╡╛р┤Хр╡Нр┤Хр╡Бр┤В р┤╕р┤ор┤Чр╡Нр┤░ р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х р┤╕р┤╣р┤╛р┤пр┤┐р┤пр┤╛р┤гр╡Н. р┤Ор┤ир╡Нр┤ир╡Лр┤Яр╡Н р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х: р┤зр┤╛р┤ир╡Нр┤пр┤Щр╡Нр┤Щр╡╛, р┤кр┤пр╡╝р┤╡р╡╝р┤Чр╡Нр┤Чр┤Щр╡Нр┤Щр╡╛, р┤кр┤Ър╡Нр┤Ър┤Хр╡Нр┤Хр┤▒р┤┐р┤Хр╡╛, р┤лр┤▓р┤Щр╡Нр┤Щр╡╛, р┤╡р┤╛р┤гр┤┐р┤Ьр╡Нр┤п р┤╡р┤┐р┤│р┤Хр╡╛.",
            'hi': "рдореИрдВ рджреБрдирд┐рдпрд╛ рднрд░ рдХреА рд╕рднреА рдлрд╕рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рд╡реНрдпрд╛рдкрдХ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореБрдЭрд╕реЗ рдкреВрдЫреЗрдВ: рдЕрдирд╛рдЬ, рджрд╛рд▓реЗрдВ, рд╕рдмреНрдЬрд┐рдпрд╛рдВ, рдлрд▓, рдирдХрджреА рдлрд╕рд▓реЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВред"
        }
        
        return {
            "answer": practical_fallback.get(request.language, practical_fallback['en']),
            "confidence": 0.8,
            "processing_time_ms": round((time.time() - start_time) * 1000),
            "language": request.language,
            "mode": "enhanced_fallback",
            "model": "Global Crop Assistant",
            "error": "handled_gracefully"
        }

@app.post("/whisper-transcribe")
async def whisper_transcribe(request: dict):
    """Transcribe audio using Whisper model"""
    try:
        audio_data = request.get("audio_data", "")
        language = request.get("language", "en")
        
        if not audio_data:
            raise HTTPException(status_code=400, detail="Audio data is required")
        
        logger.info(f"ЁЯОд Transcribing audio with Whisper for {language}")
        
        # Decode base64 audio data
        audio_bytes = base64.b64decode(audio_data)
        
        # Save to temporary file
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_audio:
            temp_audio.write(audio_bytes)
            temp_audio_path = temp_audio.name
        
        try:
            # Transcribe with Whisper
            result = whisper_model.transcribe(
                temp_audio_path,
                language=language if language != 'en' else None  # Let Whisper auto-detect if not English
            )
            
            transcribed_text = result["text"].strip()
            detected_language = result.get("language", language)
            
            logger.info(f"тЬЕ Whisper transcription: '{transcribed_text[:50]}...'")
            
            return {
                "success": True,
                "transcribed_text": transcribed_text,
                "detected_language": detected_language,
                "confidence": result.get("avg_logprob", 0.8)
            }
            
        finally:
            # Clean up temporary file
            if os.path.exists(temp_audio_path):
                os.unlink(temp_audio_path)
                
    except Exception as e:
        logger.error(f"тЭМ Whisper transcription failed: {e}")
        return {
            "success": False,
            "error": str(e),
            "message": "Whisper transcription failed"
        }

@app.post("/generate-tts")
async def generate_tts(request: dict):
    """Generate TTS using gTTS (Google Text-to-Speech) - Perfect for Indian languages"""
    try:
        text = request.get("text", "")
        language = request.get("language", "en")
        
        if not text:
            raise HTTPException(status_code=400, detail="Text is required")
        
        logger.info(f"ЁЯФК gTTS Request: {text[:50]}... in {language}")
        
        # Clean and prepare text
        text = re.sub(r'\s+', ' ', text.strip())
        text = text[:500]  # Limit length for gTTS
        
        # Map language codes for gTTS
        gtts_language_map = {
            'en': 'en',
            'ta': 'ta',
            'te': 'te', 
            'ml': 'ml',
            'hi': 'hi',
            'kn': 'kn',  # Kannada
            'bn': 'bn',  # Bengali
            'gu': 'gu',  # Gujarati
            'mr': 'mr',  # Marathi
            'pa': 'pa'   # Punjabi
        }
        
        gtts_lang = gtts_language_map.get(language, 'en')
        logger.info(f"ЁЯО╡ Using gTTS for {language} -> {gtts_lang}")
        
        # Generate TTS using gTTS
        tts = gTTS(text=text, lang=gtts_lang, slow=False)
        
        # Save to temporary file
        temp_audio = tempfile.mktemp(suffix=".mp3")
        tts.save(temp_audio)
        
        # Convert MP3 to base64 for web playback
        if os.path.exists(temp_audio) and os.path.getsize(temp_audio) > 0:
            with open(temp_audio, "rb") as audio_file:
                audio_base64 = base64.b64encode(audio_file.read()).decode('utf-8')
            
            # Clean up temporary file
            os.unlink(temp_audio)
            
            logger.info(f"тЬЕ gTTS generated successfully for {language}")
            
            return {
                "success": True,
                "audio_base64": audio_base64,
                "service": f"gTTS-{gtts_lang}",
                "voice": f"Google-{language}",
                "language": language,
                "audio_format": "mp3",
                "message": f"Generated high-quality gTTS for {language}"
            }
        else:
            raise Exception("gTTS failed to generate audio file")
            
    except Exception as e:
        logger.error(f"тЭМ gTTS generation failed: {e}")
        
        # Fallback to browser TTS
        return {
            "success": False,
            "use_browser_tts": True,
            "message": f"gTTS failed: {str(e)}. Using browser TTS fallback."
        }

if __name__ == "__main__":
    import uvicorn
    import os
    
    # Get port from environment variable for Railway deployment
    port = int(os.environ.get("PORT", 8002))
    
    logger.info("ЁЯМ╛ Starting Enhanced Global Agriculture AI with Whisper + Smart Assistant + gTTS...")
    logger.info("ЁЯО╡ Perfect Tamil/Telugu/Malayalam pronunciation with Google TTS!")
    logger.info(f"ЁЯЪА Server starting on port {port}")
    
    # For production deployment, bind to all interfaces
    uvicorn.run(app, host="0.0.0.0", port=port)
